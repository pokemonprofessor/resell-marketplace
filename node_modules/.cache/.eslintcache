[{"/Users/pulkit/Desktop/resell-marketplace-main/src/index.tsx":"1","/Users/pulkit/Desktop/resell-marketplace-main/src/reportWebVitals.ts":"2","/Users/pulkit/Desktop/resell-marketplace-main/src/App.tsx":"3","/Users/pulkit/Desktop/resell-marketplace-main/src/components/wrapper/snack.tsx":"4","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/store.ts":"5","/Users/pulkit/Desktop/resell-marketplace-main/src/routes/index.tsx":"6","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/index.tsx":"7","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/index.tsx":"8","/Users/pulkit/Desktop/resell-marketplace-main/src/routes/customRoutes.tsx":"9","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/updateProductQty.tsx":"10","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/user.tsx":"11","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/updateProductQty.tsx":"12","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/updateProductQty.tsx":"13","/Users/pulkit/Desktop/resell-marketplace-main/src/utils/auth.tsx":"14","/Users/pulkit/Desktop/resell-marketplace-main/src/api/axiosController.ts":"15","/Users/pulkit/Desktop/resell-marketplace-main/src/routes/routeList.tsx":"16","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/orderAcknowledged.tsx":"17","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/orderDetails.tsx":"18","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/taxCodes.tsx":"19","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/sellerProducts.tsx":"20","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/bulkUpload.tsx":"21","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/categories.tsx":"22","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/bankOnboarding.tsx":"23","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/seller.tsx":"24","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/sellerProducts.tsx":"25","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/taxCodes.tsx":"26","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/orderDetails.tsx":"27","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/bulkUpload.tsx":"28","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/categories.tsx":"29","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/user.tsx":"30","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/seller.tsx":"31","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/bankOnboarding.tsx":"32","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/orderAcknowledged.tsx":"33","/Users/pulkit/Desktop/resell-marketplace-main/src/routes/routesPath.tsx":"34","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Header/index.tsx":"35","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/fbApi.ts":"36","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/sellerProducts.tsx":"37","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/taxCodes.tsx":"38","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/orderDetails.tsx":"39","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/bulkUpload.tsx":"40","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/seller.tsx":"41","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/categories.tsx":"42","/Users/pulkit/Desktop/resell-marketplace-main/src/utils/validations.tsx":"43","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/user.tsx":"44","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/bankOnboarding.tsx":"45","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/SellerDashboard/sellerProducts.tsx":"46","/Users/pulkit/Desktop/resell-marketplace-main/src/components/common/Error.tsx":"47","/Users/pulkit/Desktop/resell-marketplace-main/src/components/sellerDashboardHome/index.tsx":"48","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/index.tsx":"49","/Users/pulkit/Desktop/resell-marketplace-main/src/components/SetPassword/index.tsx":"50","/Users/pulkit/Desktop/resell-marketplace-main/src/components/SignIn/index.tsx":"51","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/BulkUpload/index.tsx":"52","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/productUpdate/index.tsx":"53","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/OrderDetails/index.tsx":"54","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/BankDetails/index.tsx":"55","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Home/index.tsx":"56","/Users/pulkit/Desktop/resell-marketplace-main/src/config/firebase.ts":"57","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/productUpdate/uploadExcel.tsx":"58","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/productUpdate/excelDownloaderTemplate.tsx":"59","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/BulkUpload/uploadExcel.tsx":"60","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/BulkUpload/excelDownloader.tsx":"61","/Users/pulkit/Desktop/resell-marketplace-main/src/components/SetPassword/tokenExpired.tsx":"62","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/DirectSellers/onBoarding/index.tsx":"63","/Users/pulkit/Desktop/resell-marketplace-main/src/utils/jwtPayload.tsx":"64","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/DirectSellers/onBoarding/confirmations.tsx":"65","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/DirectSellers/onBoarding/shippingOperations.tsx":"66","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/DirectSellers/onBoarding/productIntegration.tsx":"67","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/DirectSellers/onBoarding/companyRegistration.tsx":"68","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/DirectSellers/onBoarding/applicationStart.tsx":"69","/Users/pulkit/Desktop/resell-marketplace-main/src/utils/data/templateData/qtyPrice.tsx":"70","/Users/pulkit/Desktop/resell-marketplace-main/src/utils/data/templateData/data.tsx":"71","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/DirectSellers/onBoarding/editableTable.tsx":"72"},{"size":787,"mtime":1681497759000,"results":"73","hashOfConfig":"74"},{"size":425,"mtime":1681497759000,"results":"75","hashOfConfig":"74"},{"size":265,"mtime":1681497759000,"results":"76","hashOfConfig":"74"},{"size":2377,"mtime":1681497759000,"results":"77","hashOfConfig":"74"},{"size":543,"mtime":1681497759000,"results":"78","hashOfConfig":"74"},{"size":319,"mtime":1681497759000,"results":"79","hashOfConfig":"74"},{"size":734,"mtime":1681497759000,"results":"80","hashOfConfig":"74"},{"size":734,"mtime":1681497759000,"results":"81","hashOfConfig":"74"},{"size":6651,"mtime":1681497759000,"results":"82","hashOfConfig":"74"},{"size":1046,"mtime":1681497759000,"results":"83","hashOfConfig":"74"},{"size":4606,"mtime":1681497759000,"results":"84","hashOfConfig":"74"},{"size":915,"mtime":1681497759000,"results":"85","hashOfConfig":"74"},{"size":751,"mtime":1681497759000,"results":"86","hashOfConfig":"74"},{"size":793,"mtime":1681497759000,"results":"87","hashOfConfig":"74"},{"size":440,"mtime":1681497759000,"results":"88","hashOfConfig":"74"},{"size":2202,"mtime":1681497759000,"results":"89","hashOfConfig":"74"},{"size":989,"mtime":1681497759000,"results":"90","hashOfConfig":"74"},{"size":1010,"mtime":1681497759000,"results":"91","hashOfConfig":"74"},{"size":807,"mtime":1681497759000,"results":"92","hashOfConfig":"74"},{"size":870,"mtime":1681497759000,"results":"93","hashOfConfig":"74"},{"size":972,"mtime":1681497759000,"results":"94","hashOfConfig":"74"},{"size":841,"mtime":1681497759000,"results":"95","hashOfConfig":"74"},{"size":797,"mtime":1681497759000,"results":"96","hashOfConfig":"74"},{"size":3508,"mtime":1681497759000,"results":"97","hashOfConfig":"74"},{"size":1026,"mtime":1681497759000,"results":"98","hashOfConfig":"74"},{"size":920,"mtime":1681497759000,"results":"99","hashOfConfig":"74"},{"size":956,"mtime":1681497759000,"results":"100","hashOfConfig":"74"},{"size":974,"mtime":1681497759000,"results":"101","hashOfConfig":"74"},{"size":938,"mtime":1681497759000,"results":"102","hashOfConfig":"74"},{"size":9998,"mtime":1681497759000,"results":"103","hashOfConfig":"74"},{"size":4877,"mtime":1681497759000,"results":"104","hashOfConfig":"74"},{"size":1129,"mtime":1681497759000,"results":"105","hashOfConfig":"74"},{"size":1063,"mtime":1681497759000,"results":"106","hashOfConfig":"74"},{"size":547,"mtime":1681497759000,"results":"107","hashOfConfig":"74"},{"size":1776,"mtime":1681497759000,"results":"108","hashOfConfig":"74"},{"size":1410,"mtime":1681497759000,"results":"109","hashOfConfig":"74"},{"size":356,"mtime":1681497759000,"results":"110","hashOfConfig":"74"},{"size":366,"mtime":1681497759000,"results":"111","hashOfConfig":"74"},{"size":508,"mtime":1681497759000,"results":"112","hashOfConfig":"74"},{"size":1831,"mtime":1681497759000,"results":"113","hashOfConfig":"74"},{"size":1685,"mtime":1681497759000,"results":"114","hashOfConfig":"74"},{"size":240,"mtime":1681497759000,"results":"115","hashOfConfig":"74"},{"size":1425,"mtime":1681497759000,"results":"116","hashOfConfig":"74"},{"size":3140,"mtime":1681497759000,"results":"117","hashOfConfig":"74"},{"size":233,"mtime":1681497759000,"results":"118","hashOfConfig":"74"},{"size":2997,"mtime":1681497759000,"results":"119","hashOfConfig":"74"},{"size":1157,"mtime":1681497759000,"results":"120","hashOfConfig":"74"},{"size":73,"mtime":1681497759000,"results":"121","hashOfConfig":"74"},{"size":159,"mtime":1681497759000,"results":"122","hashOfConfig":"74"},{"size":6543,"mtime":1681497759000,"results":"123","hashOfConfig":"74"},{"size":5131,"mtime":1681497759000,"results":"124","hashOfConfig":"74"},{"size":10167,"mtime":1681497759000,"results":"125","hashOfConfig":"74"},{"size":8758,"mtime":1681497759000,"results":"126","hashOfConfig":"74"},{"size":9484,"mtime":1681497759000,"results":"127","hashOfConfig":"74"},{"size":2450,"mtime":1681497759000,"results":"128","hashOfConfig":"74"},{"size":2947,"mtime":1681497759000,"results":"129","hashOfConfig":"74"},{"size":486,"mtime":1681497759000,"results":"130","hashOfConfig":"74"},{"size":5218,"mtime":1681497759000,"results":"131","hashOfConfig":"74"},{"size":1269,"mtime":1681497759000,"results":"132","hashOfConfig":"74"},{"size":2169,"mtime":1681497759000,"results":"133","hashOfConfig":"74"},{"size":1368,"mtime":1681497759000,"results":"134","hashOfConfig":"74"},{"size":1207,"mtime":1681497759000,"results":"135","hashOfConfig":"74"},{"size":5113,"mtime":1681497759000,"results":"136","hashOfConfig":"74"},{"size":256,"mtime":1681497759000,"results":"137","hashOfConfig":"74"},{"size":19583,"mtime":1681497759000,"results":"138","hashOfConfig":"74"},{"size":13441,"mtime":1681497759000,"results":"139","hashOfConfig":"74"},{"size":13062,"mtime":1681497759000,"results":"140","hashOfConfig":"74"},{"size":35807,"mtime":1681497759000,"results":"141","hashOfConfig":"74"},{"size":3351,"mtime":1681497759000,"results":"142","hashOfConfig":"74"},{"size":1951,"mtime":1681497759000,"results":"143","hashOfConfig":"74"},{"size":12603,"mtime":1681497759000,"results":"144","hashOfConfig":"74"},{"size":6001,"mtime":1681497759000,"results":"145","hashOfConfig":"74"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wvgrgz",{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"177"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313"},"/Users/pulkit/Desktop/resell-marketplace-main/src/index.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/reportWebVitals.ts",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/App.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/components/wrapper/snack.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/store.ts",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/routes/index.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/index.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/index.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/routes/customRoutes.tsx",["314","315","316","317","318","319","320","321"],"import { Routes, Route } from \"react-router-dom\";\nimport routes from \"./routeList\";\nimport Header from \"components/Header\";\nimport Content from \"components/Content\";\nimport React, { useState } from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport {\n  ListItemText,\n  ListItemIcon,\n  ListItem,\n  Divider,\n  List,\n  Toolbar,\n  AppBar,\n  CssBaseline,\n  Drawer,\n  Box,\n} from \"@mui/material\";\nimport SyncAltIcon from '@mui/icons-material/SyncAlt';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport Collapse from \"@mui/material/Collapse\";\nimport snack from \"components/wrapper/snack\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport ExitToAppIcon from \"@mui/icons-material/ExitToApp\";\nimport InventoryIcon from \"@mui/icons-material/Inventory\";\nimport { ExpandLess, ExpandMore, PostAdd } from \"@mui/icons-material\";\nimport { getSellerStart, sellerLogoutStart } from \"redux/reducers/seller\";\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport { getUserStart, logoutStart } from \"redux/reducers/user\";\n\nconst drawerWidth = 240;\nconst CustomRoutes: React.FC = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [productOpen, setProductOpen] = React.useState(true);\n  const [sellerDashboradOpen, setSellerDashboradOpen] = React.useState(true);\n  const accessToken = useSelector((state: any) => state.user.accessToken);\n\n  useEffect (() => {\n    dispatch(getUserStart());\n  }, []);\n\n  const onSignOut = () => dispatch (logoutStart());\n\n  return (\n    <>\n      {!accessToken ? (\n        <>\n          <Header />\n          <Routes >\n            {routes.map(({ path, ...rest }) => {\n              if (rest.routeType === \"un-auth\")\n                return (\n                  <Route path={path} key={path} element={rest.component} />\n                );\n            })}\n          </Routes>\n        </>\n      ) : (\n        <>\n          <Box sx={{ display: \"flex\" }}>\n            <CssBaseline />\n            <AppBar\n              position=\"fixed\"\n              sx={{\n                width: `calc(100% - ${drawerWidth}px)`,\n                ml: `${drawerWidth}px`,\n              }}\n            >\n              <Toolbar>\n                <Typography variant=\"h6\" noWrap component=\"div\">\n                  Resell Seller Dashboard\n                </Typography>\n              </Toolbar>\n            </AppBar>\n            <Drawer\n              sx={{\n                width: drawerWidth,\n                flexShrink: 0,\n                \"& .MuiDrawer-paper\": {\n                  width: drawerWidth,\n                  boxSizing: \"border-box\",\n                },\n              }}\n              variant=\"permanent\"\n              anchor=\"left\"\n            >\n              <Toolbar />\n              <Divider />\n              <List>\n                <ListItemButton onClick={() => setProductOpen(!productOpen)}>\n                  <ListItemIcon>\n                    <InventoryIcon />\n                  </ListItemIcon>\n                  <ListItemText primary=\"Product Upload\" />\n                  {productOpen ? <ExpandLess /> : <ExpandMore />}  \n                </ListItemButton>{\" \"}\n                <Collapse in={productOpen} timeout=\"auto\" unmountOnExit>\n                  <List component=\"div\" disablePadding>\n                    <ListItemButton\n                      sx={{ pl: 4 }}\n                      onClick={() => navigate(\"/bulk-upload\")}\n                    >\n                      <ListItemIcon>\n                        <PostAdd />\n                      </ListItemIcon>\n                      <ListItemText primary=\"Bulk Upload\" />\n                    </ListItemButton>\n                  </List>\n                </Collapse>\n              <br/>\n              <ListItemButton onClick={() => setSellerDashboradOpen(!sellerDashboradOpen)}>\n                  <ListItemIcon>\n                    <DashboardIcon />\n                  </ListItemIcon>\n                  <ListItemText primary=\"Seller Dashboard\" />\n                  {sellerDashboradOpen ? <ExpandLess /> : <ExpandMore />}  \n                </ListItemButton>{\" \"}\n                <Collapse in={sellerDashboradOpen} timeout=\"auto\" unmountOnExit>\n                  <List component=\"div\" disablePadding>\n                    <ListItemButton\n                      sx={{ pl: 4 }}\n                      onClick={() => navigate(\"/seller-products\")}\n                    >\n                      <ListItemIcon>\n                        <InboxIcon />\n                      </ListItemIcon>\n                      <ListItemText primary=\"Products\" />\n                    </ListItemButton>\n                  </List>\n                  <List component=\"div\" disablePadding>\n                    <ListItemButton\n                      sx={{ pl: 4 }}\n                      onClick={() => navigate(\"/order-details\")}\n                    >\n                      <ListItemIcon>\n                        <ShoppingCartIcon />\n                      </ListItemIcon>\n                      <ListItemText primary=\"Orders\" />\n                    </ListItemButton>\n                  </List>\n                  <List component=\"div\" disablePadding>\n                    <ListItemButton\n                      sx={{ pl: 4 }}\n                      onClick={() => navigate(\"/listing-status-update\")}\n                    >\n                      <ListItemIcon>\n                        <SyncAltIcon />\n                      </ListItemIcon>\n                      <ListItemText primary=\"update Products\" />\n                    </ListItemButton>\n                  </List>\n                </Collapse>\n              <br/>\n\n                <ListItem button key=\"Sign Out\">\n                  <ListItemIcon>\n                    <ExitToAppIcon />\n                  </ListItemIcon>\n                  <ListItemText primary=\"Sign Out\" onClick={onSignOut} />\n                </ListItem>\n              </List>\n            </Drawer>\n            <Box\n              component=\"main\"\n              sx={{ flexGrow: 1, bgcolor: \"background.default\", p: 3 }}\n            >\n              <Toolbar />\n              <Routes>\n                {routes.map(({ path, ...rest }) => {\n                  if (rest.routeType === \"auth\")\n                    return (\n                      <Route path={path} key={path} element={rest.component} />\n                    );\n                })}\n              </Routes>\n            </Box>\n          </Box>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default CustomRoutes;\n","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/updateProductQty.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/user.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/updateProductQty.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/updateProductQty.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/utils/auth.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/api/axiosController.ts",["322"],"import axios from \"axios\";\n\nconst axiosInstance = axios.create({\n  withCredentials: false,\n  baseURL: process.env.REACT_APP_BACKEND_HOST,\n});\n\nexport default axiosInstance;\n\nexport const axiosInstanceAdmin = axios.create({\n  withCredentials: false,\n  baseURL: process.env.\n  REACT_APP_BACKEND_HOST_ADMIN,\n});\n\nexport const axiosInstanceMain = axios.create({\n  withCredentials: false,\n  baseURL: process.env.REACT_APP_BACKEND_HOST_MAIN,\n});\n","/Users/pulkit/Desktop/resell-marketplace-main/src/routes/routeList.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/orderAcknowledged.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/orderDetails.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/taxCodes.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/sellerProducts.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/bulkUpload.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/categories.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/bankOnboarding.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/reducers/seller.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/sellerProducts.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/taxCodes.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/orderDetails.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/bulkUpload.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/categories.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/user.tsx",["323","324","325","326","327","328","329","330"],"import snack from \"components/wrapper/snack\";\nimport { call, takeLatest, put } from \"redux-saga/effects\";\nimport { sendOTPWithFb } from \"redux/services/fbApi\";\nimport {\n  checkEmail,\n  getCountryCode,\n  signIn,\n  signUpBuyer,\n  verifyEmailOTP,\n} from \"redux/services/user\";\nimport {\n  getUserStart,\n  loginFail,\n  loginStart,\n  loginSuccess,\n  logoutStart,\n  getUserSuccess,\n  clearUserData,\n  signupStartStart,\n  showVerifyOTPStart,\n  showVerifyOTPSuccess,\n  signupStartFailure,\n  setLoading,\n  setShowOtpScreen,\n  sendOTPUsingFirebaseStart,\n  sendOTPUsingFirebaseSuccess,\n  sendOTPUsingFirebaseFail,\n  verifyEmailOTPStart,\n  verifyEmailOTPSuccess,\n} from \"redux/reducers/user\";\nimport {\n  clearAccessToken,\n  clearRefreshToken,\n  getAccessToken,\n  getUser,\n  setAccessToken,\n  setRefreshToken,\n} from \"utils/auth\";\nimport { isPhoneNumber } from \"utils/validations\";\nimport { getSellers } from \"redux/services/seller\";\n\nfunction* userSagaWatcher() {\n  yield takeLatest(\n    [\n      loginStart.type,\n      logoutStart.type,\n      getUserStart.type,\n      signupStartStart.type,\n      sendOTPUsingFirebaseStart.type,\n      verifyEmailOTPStart.type,\n    ],\n    userWorker\n  );\n}\n\nfunction* userWorker(action: any): any {\n  try {\n    switch (action.type) {\n      case loginStart.type:\n        {\n          console.log('action.payload',action.payload)\n          const { userDataCredential, navigate } = action.payload;\n          const sellers = yield call(getSellers)\n          if(sellers.ResponseBody && sellers.ResponseBody.sellers){\n          let sellerData =  sellers.ResponseBody.sellers.filter((item:any)=> item.email === action.payload.userDataCredential.emailOrPhone)\n          console.log('sellers1',sellerData) \n          if(sellerData.length>0){\n            console.log('sellerData[0].isApproved',sellerData[0].isApproved)\n            if(sellerData[0].isApproved){\n\n              const result = yield call(signIn, userDataCredential);\n          \n              if (result.ResponseBody.verified) {\n                console.log('11111')\n                yield put(\n                  loginSuccess({\n                    verified: true,\n                    user: {\n                      emailOrPhone: action.payload.user.emailOrPhone,\n                      password: action.payload.user.password,\n                      phoneNumber: result.ResponseBody.phoneNumber,\n                      countryCode: result.ResponseBody.countryCode,\n                    },\n                  })\n                );\n              } else {\n                console.log('22222')\n    \n                setAccessToken(result.ResponseBody.token);\n                setRefreshToken(result.ResponseBody.refreshToken);\n    \n                let user: any = getUser(getAccessToken());\n                let res = yield call(getCountryCode, { phone: user.phoneNumber });\n                user.countryCode = res.ResponseBody.countryCode;\n                user.token = result.ResponseBody.token;\n                yield put(loginSuccess({ user: user }));\n                snack.success(\"Logged In successfully\");\n                navigate('/seller-dashboard');\n                // if (action.payload.buyNowFlow) {\n                //   history.push({\n                //     pathname: \"/\",\n                //     state: { buyNowFlow: action.payload.buyNowFlow },\n                //   });\n                // } else {\n                //   history.push('/');\n                // }\n                yield put(getUserStart());\n              }\n\n            }\n          }\n\n          \n          }\n         \n        }\n        break;\n\n      // eslint-disable-next-line no-lone-blocks\n      case signupStartStart.type:\n        {\n          const { user, history } = action.payload;\n          if (action.payload.user.otpConfirm) {\n            yield put(setLoading({ loading: true }));\n            yield put(setShowOtpScreen({ showOtpScreen: true }));\n            const res = yield call(signUpBuyer, user);\n            yield put(setLoading({ loading: false }));\n\n            snack.success(\"Verified OTP successfully\");\n            yield put(setShowOtpScreen({ showOtpScreen: false }));\n            history.push({\n              pathname: \"/verify-email-otp\",\n              state: { email: user.email },\n            });\n          } else {\n            const { user } = action.payload;\n            yield put(setLoading({ loading: true }));\n            let result = yield call(checkEmail, {\n              email: user.email.trim().toLowerCase(),\n            });\n            yield put(setLoading({ loading: false }));\n\n            if (user.phoneNumber) {\n              let isPhoneNumberValid = isPhoneNumber(user.phoneNumber);\n\n              if (!isPhoneNumberValid) {\n                snack.error(\"Enter a valid phone number to receive OTP\");\n                return;\n              }\n\n              if (result.ResponseBody.valid) {\n                yield put(showVerifyOTPStart());\n                yield put(setLoading({ loading: true }));\n\n                const result = yield call(sendOTPWithFb, {\n                  phoneNumber: user.countryCode + user.phoneNumber,\n                  containerName: \"recaptcha-container\",\n                  appVerifier: null,\n                });\n\n                yield put(setLoading({ loading: false }));\n\n                if (result.captchaBoolean) {\n                  yield put(\n                    showVerifyOTPSuccess({ appVerifier: result.appVerifier })\n                  );\n                  snack.success(\"An OTP has been sent to you mobile\");\n                } else {\n                  snack.error(\"Unable to send OTP\");\n                }\n              }\n            }\n\n            if (!user.phoneNumber && user.email) {\n              yield put(setLoading({ loading: true }));\n              const res = yield call(signUpBuyer, user);\n              yield put(setLoading({ loading: false }));\n              history.push({\n                pathname: \"/verify-email-otp\",\n                state: { email: user.email },\n              });\n            }\n          }\n        }\n        break;\n\n      case sendOTPUsingFirebaseStart.type:\n        {\n          const result = yield call(sendOTPWithFb, {\n            phoneNumber:\n              action.payload.countryCode + action.payload.phoneNumber,\n            containerName: \"recaptcha-container\",\n            appVerifier: null,\n          });\n\n          if (result.captchaBoolean) {\n            yield put(\n              sendOTPUsingFirebaseSuccess({ appVerifier: result.appVerifier })\n            );\n            snack.success(\"An OTP has been sent to you mobile\");\n          } else {\n            snack.error(\"Unable to send OTP\");\n          }\n        }\n        break;\n\n      case verifyEmailOTPStart.type:\n        {\n          const { history } = action.payload;\n          const res = yield call(verifyEmailOTP, action.payload);\n          yield put(verifyEmailOTPSuccess());\n          if (res.ResponseBody.emailVerified) {\n            snack.success(\"Email is verified successfully\");\n            history.push(\"/signin\");\n          }\n        }\n        break;\n\n      // eslint-disable-next-line no-lone-blocks\n      case logoutStart.type:\n        {\n          clearAccessToken();\n          clearRefreshToken();\n          yield put(clearUserData());\n          snack.success(\"Logged out successfully\");\n        }\n        break;\n\n      // eslint-disable-next-line no-lone-blocks\n      case getUserStart.type:\n        {\n          if (getAccessToken()) {\n            const accessToken = getAccessToken();\n            let user: any = getUser(accessToken);\n            let res = yield call(getCountryCode, { phone: user.phoneNumber });\n            user.countryCode = res.ResponseBody.countryCode;\n            user.token = accessToken;\n            yield put(getUserSuccess({ user }));\n          }\n        }\n        break;\n\n      default:\n        break;\n    }\n  } catch (err: any) {\n    if (action.type === signupStartStart.type) {\n      yield put(setLoading({ loading: false }));\n      yield put(signupStartFailure({ msg: err?.response.data.message }));\n\n      if (\n        err?.response?.data?.message ===\n        \"Email already exists: Please use a new email\"\n      ) {\n        snack.error(err?.response?.data?.message);\n      }\n      yield put(loginFail({ msg: err, error: true }));\n    } else if (action.type === sendOTPUsingFirebaseStart.type) {\n      snack.error(\"Unable to send OTP\");\n      yield put(\n        sendOTPUsingFirebaseFail({\n          error: err,\n          msg: \"Unable to send OTP\",\n        })\n      );\n    } else if (action.type === verifyEmailOTPStart.type) {\n      snack.error(err.response?.data?.message);\n    } else if (action.type === loginStart.type) {\n      let msg: string = \"\",\n        emailVerificationSigninErr: boolean = false;\n      switch (err.response?.data?.message) {\n        // eslint-disable-next-line no-lone-blocks\n        case \"emailUnverified\":\n          {\n            msg =\n              \"Email is not verified. Please verify your email or resend the email verification link!\";\n            emailVerificationSigninErr = true;\n            snack.error(msg);\n          }\n          break;\n\n        // eslint-disable-next-line no-lone-blocks\n        case \"Authentication failed, invalid password.\":\n          {\n            msg = \"Password incorrect !\";\n            snack.error(msg);\n          }\n          break;\n\n        // eslint-disable-next-line no-lone-blocks\n        case \"Authentication failed. Invalid email or phone number.\":\n          {\n            msg = \"Invalid email or phone number !\";\n            snack.error(msg);\n          }\n          break;\n\n        // eslint-disable-next-line no-lone-blocks\n        default:\n          {\n            console.error(\"Invalid case\");\n          }\n          break;\n      }\n\n      yield put(\n        loginFail({\n          msg,\n          emailVerificationSigninErr,\n          error: true,\n        })\n      );\n    } else {\n      yield put(loginFail({ msg: err, error: true }));\n    }\n  }\n}\n\nexport default userSagaWatcher;\n","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/seller.tsx",["331","332"],"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport snack from \"components/wrapper/snack\";\nimport {\n  sellerStart,\n  sellerSuccess,\n  sellerFailure,\n  sellerSigninStart,\n  sellerSigninSuccess,\n  sellerSigninFailure,\n  setSellerPasswordStart,\n  setSellerPasswordSuccess,\n  setSellerPasswordFailure,\n  uploadDocumentsStart,\n  uploadDocumentsSuccess,\n  uploadDocumentsFailure,\n  resendEmail,\n  resendEmailSuccess,\n  resendEmailFailure,\n  sellerLogoutStart,\n  sellerLogoutSuccess,\n  sellerLogoutFailure,\n  getSellerStart,\n  getSellerSuccess,\n} from \"redux/reducers/seller\";\nimport {\n  onBoardSeller,\n  signinSeller,\n  uploadDocs,\n  setSellerPassword,\n  resendSetPasswordEmail,\n} from \"redux/services/seller\";\nimport {\n  clearAccessToken,\n  clearRefreshToken,\n  getAccessToken,\n  getUser,\n  setAccessToken,\n  setRefreshToken,\n} from \"utils/auth\";\n\nfunction* sellerOnboardingSagaWatcher() {\n  yield takeLatest(\n    [\n      sellerStart.type,\n      sellerSigninStart.type,\n      setSellerPasswordStart.type,\n      uploadDocumentsStart.type,\n      resendEmail.type,\n      getSellerStart.type,\n      sellerLogoutStart.type\n    ],\n    sellerOnboardingWorker\n  );\n}\n\nfunction* sellerOnboardingWorker(action: any): any {\n  try {\n    switch (action.type) {\n      case sellerStart.type:\n        {\n          const response: any = yield call(onBoardSeller, action.payload);\n          yield put(sellerSuccess());\n        }\n        break;\n      case sellerSigninStart.type:\n        {\n          const {sellerData, navigate} = action.payload;\n          const response: any = yield call(signinSeller, sellerData);\n          setAccessToken(response.ResponseBody.token);\n          setRefreshToken(response.ResponseBody.refreshToken);\n          let seller: any = getUser(getAccessToken());\n          yield put(\n            sellerSigninSuccess({ seller, token: response.ResponseBody.token })\n          );\n          snack.success(\"Seller Logged in successfully\");\n          navigate ('/seller-dashboard');\n        }\n        break;\n      case getSellerStart.type:\n        {\n          if (getAccessToken()) {\n            const accessToken = getAccessToken();\n            let seller: any = getUser(accessToken);\n            seller.token = accessToken;\n            yield put(getSellerSuccess({ seller }));\n          }\n        }\n        break;\n      case setSellerPasswordStart.type:\n        {\n          const { navigate, sellerData } = action.payload;\n          const response: any = yield call(\n            setSellerPassword,\n            action.payload.sellerData\n          );\n          yield put(setSellerPasswordSuccess());\n          console.log(response);\n          navigate(\"/seller/add-banking-details\", { state: sellerData });\n          snack.success(\"Password set successfully\");\n        }\n        break;\n      case uploadDocumentsStart.type:\n        {\n          const response: any = yield call(uploadDocs, action.payload);\n          yield put(\n            uploadDocumentsSuccess({ documents: response.ResponseBody })\n          );\n          snack.success(\"Document uploaded successfully\");\n        }\n        break;\n      case resendEmail.type:\n        {\n          const response: any = yield call(\n            resendSetPasswordEmail,\n            action.payload\n          );\n          yield put(resendEmailSuccess());\n          snack.success(response);\n        }\n        break;\n      case sellerLogoutStart.type:\n        {\n          const {navigate} = action.payload;\n          clearAccessToken();\n          clearRefreshToken();\n          yield put(sellerLogoutSuccess());\n          snack.success(\"Logged out successfully\");\n          navigate('/');\n        }\n        break;\n      default:\n        break;\n    }\n  } catch (err: any) {\n    console.error(`Error occuring while calling an action ${action.type}`, err);\n\n    if (action.type === sellerStart.type) {\n      snack.error(err?.response?.data?.msg);\n      yield put(sellerFailure());\n    }\n\n    if (action.type === sellerSigninStart.type) {\n      snack.error(err?.response?.data?.message);\n      yield put(sellerSigninFailure({ msg: err?.response?.data?.message }));\n    }\n\n    if (action.type === setSellerPasswordStart.type) {\n      snack.error(err?.response?.data?.msg);\n      yield put(setSellerPasswordFailure({ msg: err?.response?.data?.msg }));\n    }\n    if (action.type === resendEmail.type) {\n      snack.error(err?.response?.data?.msg);\n      yield put(resendEmailFailure({ msg: err?.response?.data?.msg }));\n    }\n    if (action.type === uploadDocumentsStart.type) {\n      snack.error(err?.response?.data?.msg);\n      yield put(uploadDocumentsFailure({ msg: err?.response?.data?.msg }));\n    }\n    if (action.type === sellerLogoutStart.type) {\n      snack.error(err?.response?.data?.msg);\n      yield put(sellerLogoutFailure({ msg: err?.response?.data?.msg }));\n    }\n  }\n}\n\nexport default sellerOnboardingSagaWatcher;\n","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/bankOnboarding.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/orderAcknowledged.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/routes/routesPath.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/components/Header/index.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/fbApi.ts",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/sellerProducts.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/taxCodes.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/orderDetails.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/bulkUpload.tsx",["333"],"import axios from \"api/axiosController\";\nimport { getAccessToken } from \"utils/auth\";\n\nexport const make_api_call = async (data: any) => {\n  let uri = `/bulk-upload`;\n\n  try {\n    const res = await axios.post(\n      uri,\n      { data: data },\n      { headers: { Authorization: `Bearer ${getAccessToken()}` } }\n    );\n    return res.data;\n  } catch (e) {\n    // throw e;\n    return e;\n  }\n};\n\nasync function sliceIntoChunks(arr: any[], chunkSize: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += chunkSize) {\n    const chunk = arr.slice(i, i + chunkSize);\n    res.push(chunk);\n  }\n  return res;\n}\n\nasync function processProducts(data: any) {\n  let formatedData: any = await sliceIntoChunks(data, 5000);\n  let result;\n  setTimeout(async () => {\n    for (let i = 0; i < formatedData.length; i++) {\n      result = await make_api_call(formatedData[i]);\n      formatedData[i][\"result\"] = result;\n    }\n  }, 10000);\n  return data;\n}\n\n// export const bulkUploadProuducts = async (data: any) => {\n//   let result = await processProducts(data.data);\n//   return result;\n// };\n\n\nexport const bulkUploadProuducts = async (data: any) => {\n  console.log('satatatta',data)\n  let uri = `/bulk-upload`;\n  console.log('dataatatatat',data.documents)\n  const formData = new FormData();\n  for (const key of Object.keys(data.documents)) {\n      formData.append('files', data.documents[key]) \n  }\n\n  formData.append('email', data.email);\n  formData.append('firstName', data.firstName);\n  formData.append('lastName', data.lastName);\n  formData.append('userId', data.userId);\n  formData.append('username', data.username);\n\n  try {\n    const res = await axios.post(uri, formData, { headers: { \"Content-type\": \"multipart/form-data\", Authorization: `Bearer ${getAccessToken()}` } });\n    return res.data;\n  } catch (e) {\n    throw e;\n  }\n};\n","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/seller.tsx",["334"],"import axios from \"api/axiosController\";\nimport { axiosInstanceAdmin } from \"api/axiosController\";\nimport { getAccessToken } from \"utils/auth\";\n\nexport const onBoardSeller = async (data: any) => {\n  let uri = `/signup`;\n\n  try {\n    const res = await axios.post(uri, data);\n    return res.data;\n  } catch (e) {\n    throw e;\n  }\n};\n\nexport const signinSeller = async (data: any) => {\n  let uri = `/signin`;\n\n  try {\n    const res = await axios.post(uri, data);\n    return res.data;\n  } catch (e) {\n    throw e;\n  }\n};\n\nexport const setSellerPassword = async (data: any) => {\n  let uri = `/create-password`;\n\n  try {\n    const res = await axios.put(uri, data);\n    return res.data;\n  } catch (e) {\n    throw e;\n  }\n};\n\nexport const resendSetPasswordEmail = async (data: any) => {\n  let uri = `/admin/seller-resend-email`;\n\n  try {\n    const res = await axiosInstanceAdmin.post(uri, data);\n    return res.data;\n  } catch (e) {\n    throw e;\n  }\n};\n\nexport const uploadDocs = async (data: any) => {\n  let uri = `/upload`;\n  const formData = new FormData();\n  for (const key of Object.keys(data.documents)) {\n      formData.append('files', data.documents[key])\n  }\n\n  formData.append('email', data.email);\n  formData.append('firstName', data.firstName);\n  formData.append('lastName', data.lastName);\n\n  try {\n    const res = await axios.post(uri, formData, { headers: { \"Content-type\": \"multipart/form-data\" } });\n    return res.data;\n  } catch (e) {\n    throw e;\n  }\n};\n\nexport const getSellers = async () => {\n  let uri = `/admin/get-sellers`;\n  try {\n    const res = await axiosInstanceAdmin.get(uri);\n    console.log('resss',res)\n    return res.data;\n  } catch (e) {\n    throw e;\n  }\n};\n","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/categories.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/utils/validations.tsx",["335"],"//Function to validate email\nconst isEmail = function (emailStr : string) : boolean {\n  const regex : RegExp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return regex.test (String(emailStr).toLowerCase());\n}\n\n//Function to validate phone number\nconst isPhoneNumber = function (phoneNumberStr : string) : boolean {\n  const regex : RegExp = /^\\d{10}$/;\n  return regex.test (String(phoneNumberStr));\n}\n\n//Function to validate that a string contains alphabetical characters. Eg - Firstname or Lastname\nconst containsAlphabeticalLetters  = function (str : string) : boolean {\n  const regex : RegExp = /^[A-Za-z\\s]+$/;\n  return regex.test (String(str));\n}\n\nconst isCompanyName  = function (str : string) : boolean {\n  const regex : RegExp = /^[a-zA-Z0-9][a-zA-Z0-9\\.\\-#&\\s]*$/;\n  return regex.test (String(str));\n}\n\n//Function to check starting value is backspace value or not\nconst isValueContainSpace  = function (str : string) : boolean {\n  const regex : RegExp = /^(?!\\s)/;\n  return regex.test (String(str));\n}\n\n//Function to validate that OTP length is 6.\nconst isOTP  = function (Otpstr : string) : boolean {\n  const regex : RegExp = /(^|\\D)\\d{6}($|\\D)/;\n  return regex.test (String(Otpstr));\n}\n\nexport {\n  isEmail,\n  isPhoneNumber,\n  containsAlphabeticalLetters,\n  isOTP,\n  isCompanyName,\n  isValueContainSpace\n}\n","/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/user.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/redux/services/bankOnboarding.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/SellerDashboard/sellerProducts.tsx",["336","337"],"import \"../../../styles/common.css\";\nimport \"./style.css\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { sellerProductsStart } from \"redux/reducers/sellerProducts\";\nimport { RootState } from \"redux/store\";\nimport { Pagination } from \"@mui/material\";\n\nexport const SellerProducts = () => {\n  const dispatch = useDispatch();\n  const [rows, setRows] = useState<any[]>([]);\n\n  const sellerProductsData = useSelector(\n    (state: RootState) => state.sellerProducts.sellerProducts\n  );\n  const userState = useSelector(\n    (state: RootState) => state?.seller?.seller\n  );\n  useEffect(() => {\n    dispatch(sellerProductsStart({ sellerId: userState?.sellerId }));\n  }, [userState?.sellerId]);\n\n  useEffect(() => {\n    const rows: any[] = [];\n    if (sellerProductsData && sellerProductsData.sellerProductsResponse) {\n      sellerProductsData.sellerProductsResponse.forEach((item: any) => {\n        rows.push({\n          title: item.title,\n          description: item.description,\n          price: item.price,\n        });\n      });\n      console.log(\n        \"sellerProductsDatasellerProductsData\",\n        sellerProductsData.sellerProductsResponse\n      );\n      setRows(rows);\n    }\n  }, [sellerProductsData]);\n  return (\n    <>\n      <div>\n        <h2>Total Products: &nbsp;&nbsp;&nbsp;&nbsp;{rows.length}</h2>\n      </div>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <h4>Title</h4>\n              </TableCell>\n              <TableCell>\n                <h4>Description</h4>\n              </TableCell>\n              <TableCell>\n                <h4>price</h4>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <>\n                {console.log(\"erererererer\", row)}\n                <TableRow key={row.title}>\n                  <TableCell style={{ maxWidth: \"200px\" }}>\n                    {row.title}\n                  </TableCell>\n                  <TableCell style={{ maxWidth: \"200px\" }}>\n                    {row.description}\n                  </TableCell>\n                  <TableCell align=\"right\">{`$ ${row.price}`}</TableCell>\n                </TableRow>\n              </>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {/* <TablePagination\n  component=\"div\"\n  count={100}\n  page={page}\n  onPageChange={handleChangePage}\n  rowsPerPage={rowsPerPage}\n  onRowsPerPageChange={handleChangeRowsPerPage}\n/> */}\n    </>\n  );\n};\n","/Users/pulkit/Desktop/resell-marketplace-main/src/components/common/Error.tsx",["338","339"],"import Card from '@mui/material/Card';\nimport Grid from '@mui/material/Grid';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { useState } from \"react\";\nimport './style.css';\n\nconst Error = (props: any) => {\n  const [msg, setMsg] = useState(props.msg ? props.msg : 'Page not Found');\n  const [statusCode, setStatusCode] = useState(props.statusCode ? props.statusCode : 404);\n  \n  return (\n    <Grid direction='column' container alignItems='center' justifyContent={\"center\"}>\n      <Grid item>\n        <div className=\"container\">\n          <div className=\"auth-form-wrap-home\">\n            <Card sx={{ minWidth: 1000 }}>\n              <CardContent>\n                <Typography alignItems={'center'} alignContent='center' sx={{ fontSize: 30 }} color=\"#0f5b9e\">\n                  {statusCode}\n                </Typography>\n                <Typography sx={{ fontSize: 30 }} color=\"#0f5b9e\">\n                  {msg}\n                </Typography>               \n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Error;\n","/Users/pulkit/Desktop/resell-marketplace-main/src/components/sellerDashboardHome/index.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/index.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/components/SetPassword/index.tsx",["340"],"import React, { SyntheticEvent, useState } from \"react\";\nimport {\n  Typography,\n  Grid,\n  TextField,\n  OutlinedInput,\n  InputAdornment,\n  IconButton,\n  Link\n} from '@mui/material';\n\nimport './style.css';\nimport { useDispatch } from \"react-redux\";\nimport { setSellerPasswordStart } from \"redux/reducers/seller\";\nimport jwtPayload from \"utils/jwtPayload\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport jwt from 'jsonwebtoken';\nimport { useEffect } from 'react';\nimport TokenExpired from './tokenExpired'\n\nconst SetPassword: React.FC = () => {\n  const dispatch = useDispatch();\n  const params = useParams();\n  let sellerData = jwtPayload(params.token)\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isTokenExpired, setIsTokenExpired] = useState(false)\n  const [error, setErr] = useState({\n    email: {\n      err: false,\n      msg: ''\n    },\n    password: {\n      err: false,\n      msg: ''\n    },\n    confirmPassword: {\n      err: false,\n      msg: \"\"\n    }\n  });\n  const [seller, setSeller] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n\n  useEffect(() => {\n    jwt.verify(params.token!, 'THIS IS TOP SECRET', function(err, decoded) {\n      if (err) {\n        if(err.name === 'TokenExpiredError')\n        setIsTokenExpired(true)\n      } else {\n        setSeller({ ...seller, email: sellerData.email })\n      }\n    });\n  },[params.token])\n\n  \n\n  const setSellerPassword = (e: SyntheticEvent) => {\n    e.preventDefault();\n\n    if (isTokenExpired) {\n      alert('Link Expired');\n      return;\n    }\n\n    if (!seller.password) {\n      alert('Please enter both email and password');\n    } else {\n      sellerData = { ...sellerData, password: seller.password, token: params.token };\n      dispatch(setSellerPasswordStart({ sellerData, navigate })\n      );\n    }\n  };\n\n  return (\n    isTokenExpired ? <TokenExpired email = {sellerData.email}/> :\n    <Grid direction='column' container alignItems='center'>\n      <Grid item>\n        <Typography className={'heading'} component=\"h1\" variant=\"h5\">\n          Set Your Password\n        </Typography>\n      </Grid>\n      <Grid item>\n        <section className=\"auth-section\">\n          <div className=\"container\">\n            <div className=\"auth-form-wrap\">\n              <form onSubmit={setSellerPassword}>\n                <div className=\"form-group\">\n                  <label>Email</label>\n                  <TextField\n                    error={error.email.err}\n                    className={'mui-text-field'}\n                    // placeholder=\"Enter your email\"\n                    color='primary'\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth\n                    autoComplete='off'\n                    id=\"email\"\n                    name=\"email\"\n                    helperText={error.email.msg}\n                    value = {sellerData?.email ? sellerData.email : 'Error Getting Email'}\n                    inputProps={\n                      { readOnly: true }\n                    }\n                    sx={{ input: { backgroundColor: '#E8E8E8', color: '#404040' } }}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Password</label>\n                  <OutlinedInput\n                    className={'mui-text-field'}\n                    placeholder=\"Enter your password\"\n                    id=\"outlined-adornment-password\"\n                    type={showPassword ? 'text' : 'password'}\n                    color='primary'\n                    fullWidth\n                    name=\"password\"\n                    onChange={(e) => {\n                      setErr({ ...error, password: { err: false, msg: \"\" } })\n                      setSeller({ ...seller, password: e.target.value })\n                    }}\n                    endAdornment={\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          onMouseDown={(e) => { e.preventDefault() }}\n                          edge=\"end\"\n                        >\n                          {showPassword ? <span className=\"password-visibility\">Hide</span> : <span className=\"password-visibility\">Show</span>}\n                        </IconButton>\n                      </InputAdornment>\n                    }\n                    label=\"Password\"\n                  />\n\n                </div>\n                <div className=\"form-group\">\n                  <label>Confirm Password</label>\n                  <OutlinedInput\n                    className={'mui-text-field'}\n                    placeholder=\"Confirm password\"\n                    id=\"outlined-adornment-password\"\n                    type={showConfirmPassword ? 'text' : 'password'}\n                    color='primary'\n                    fullWidth\n                    name=\"confirmPassword\"\n                    onChange={(e) => {\n                      setErr({ ...error, confirmPassword: { err: false, msg: \"\" } })\n                      setSeller({ ...seller, confirmPassword: e.target.value })\n                    }}\n                    endAdornment={\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                          onMouseDown={(e) => { e.preventDefault() }}\n                          edge=\"end\"\n                        >\n                          {showConfirmPassword ? <span className=\"password-visibility\">Hide</span> : <span className=\"password-visibility\">Show</span>}\n                        </IconButton>\n                      </InputAdornment>\n                    }\n                    label=\"Password\"\n                  />\n                </div>\n                <div className=\"auth-btn-wrap align-items-center justify-content-between\">\n                  <button type=\"submit\" className=\"btn btn-primary\">SUBMIT</button>\n                </div>\n              </form>\n            </div>\n            <p>By continuing, you agree to <Link>Resell's Conditions</Link > of Use and Privacy Notice</p>\n          </div>\n        </section>\n\n      </Grid>\n    </Grid >\n  );\n}\n\nexport default SetPassword;\n","/Users/pulkit/Desktop/resell-marketplace-main/src/components/SignIn/index.tsx",["341","342"],"import React, { SyntheticEvent, useState } from \"react\";\nimport {\n  Typography,\n  Grid,\n  TextField,\n  OutlinedInput,\n  InputAdornment,\n  IconButton,\n  Link,\n} from \"@mui/material\";\nimport { isEmail } from \"utils/validations\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { sellerSigninStart } from \"redux/reducers/seller\";\n\nimport \"./style.css\";\nimport { loginStart } from \"redux/reducers/user\";\n\nconst SignIn: React.FC = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setErr] = useState({\n    email: {\n      err: false,\n      msg: \"\",\n    },\n    password: {\n      err: false,\n      msg: \"\",\n    },\n  });\n  const [seller, setSeller] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const validateEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let msg: string = \"\",\n      err: boolean = false;\n\n    let email = e.target.value;\n\n    if (!isEmail(email)) {\n      err = true;\n      msg = \"Please enter a valid email address\";\n    } else {\n      err = false;\n      setSeller({ ...seller, email });\n    }\n\n    setErr((prevState) => ({\n      ...prevState,\n      email: {\n        err,\n        msg,\n      },\n    }));\n  };\n\n  const loginseller = (e: SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!seller.email || !seller.password) {\n      alert(\"Please enter both email and password\");\n    } else {\n      // dispatch(sellerSigninStart({ sellerData: seller, navigate}));\n\n      console.log('seller',seller)\n      let userDataCredential = {emailOrPhone:seller.email,password:seller.password}\n      dispatch(loginStart( {userDataCredential, navigate}));  \n    } \n  };\n\n  return (\n    <Grid direction=\"column\" container alignItems=\"center\">\n      <Grid item>\n        <Typography className={\"heading\"} component=\"h1\" variant=\"h5\">\n          Seller Sign-In\n        </Typography>\n      </Grid>\n      <Grid item>\n        <section className=\"auth-section\">\n          <div className=\"container\">\n            <div className=\"auth-form-wrap\">\n              <form onSubmit={loginseller}>\n                <div className=\"form-group\">\n                  <label>Email</label>\n                  <TextField\n                    error={error.email.err}\n                    className={\"mui-text-field\"}\n                    placeholder=\"Enter your email\"\n                    color=\"primary\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    fullWidth\n                    autoComplete=\"off\"\n                    id=\"email\"\n                    name=\"email\"\n                    helperText={error.email.msg}\n                    onChange={validateEmail}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Password</label>\n                  <OutlinedInput\n                    className={\"mui-text-field\"}\n                    placeholder=\"Enter your password\"\n                    id=\"outlined-adornment-password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    color=\"primary\"\n                    fullWidth\n                    name=\"password\"\n                    onChange={(e) => {\n                      setErr({ ...error, password: { err: false, msg: \"\" } });\n                      setSeller({ ...seller, password: e.target.value });\n                    }}\n                    endAdornment={\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          onMouseDown={(e) => {\n                            e.preventDefault();\n                          }}\n                          edge=\"end\"\n                        >\n                          {showPassword ? (\n                            <span className=\"password-visibility\">Hide</span>\n                          ) : (\n                            <span className=\"password-visibility\">Show</span>\n                          )}\n                        </IconButton>\n                      </InputAdornment>\n                    }\n                    label=\"Password\"\n                  />\n                </div>\n                <div id=\"recaptcha-container\" />\n                <div className=\"auth-btn-wrap align-items-center justify-content-between\">\n                  <button type=\"submit\" className=\"btn btn-primary\">\n                    Login\n                  </button>\n                  {/* <div className=\"forget-wrap\">\n                    <Link className=\"btn btn-primary forgot-pwd\">\n                      Forgot Password\n                    </Link>\n                  </div> */}\n                </div>\n              </form>\n            </div>\n            <p>\n              By continuing, you agree to <Link>Resell's Conditions</Link> of\n              Use and Privacy Notice\n            </p>\n          </div>\n        </section>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default SignIn;\n","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/BulkUpload/index.tsx",["343","344","345","346"],"import {\n  Autocomplete,\n  CircularProgress,\n  Grid,\n  LinearProgress,\n  List,\n  ListItem,\n  Typography,\n} from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { categoriesStart } from \"redux/reducers/categories\";\nimport { RootState } from \"redux/store\";\nimport { ExcelDownloader } from \"./excelDownloader\";\nimport ExcelToJson from \"./uploadExcel\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport InfoIcon from \"@mui/icons-material/Info\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Card from \"@mui/material/Card\";\nimport { taxCodesStart } from \"redux/reducers/taxCodes\";\n\nimport \"../../../styles/common.css\";\nimport \"./style.css\";\n\nexport const BulkUpload = () => {\n  const dispatch = useDispatch();\n  const [categoryList, setCategoryList] = useState([]);\n  const [categoryValue, setCategoryValue] = useState<string | null>();\n  const [data, setData] = useState<any>([]);\n  const isLoading = useSelector(\n    (state: RootState) => state.bulkUpload.isLoading\n  );\n\n  useEffect(() => {\n    dispatch(categoriesStart());\n  }, [dispatch]);\n\n\n  const categories = useSelector(\n    (state: RootState) => state.categories.categories\n  );\n\n\n  useEffect(() => {\n    let _categorylist: any = [];\n\n    for (let i = 0; i < categories.length; i++) {\n      _categorylist.push(categories[i].categoryName);\n    }\n    setCategoryList(_categorylist);\n  }, [categories]);\n\n \n\n  const onBeforeDownload = (categoryName: string) => {\n    let _data = [];\n\n    for (let i = 0; i < 5; i++) {\n      _data.push({\n        \"Product Id\": \"\",\n        \"Category Name\": categoryName,\n        Title: \"\",\n        Description: \"\",\n        Brand: \"\",\n        CollegeName:\"\",\n        Condition: \"\",\n        \"Sale Price\": \"\",\n        \"Shipping Cost Standard\": \"\",\n        \"Shipping Cost Expedited\": \"\",\n        \"Shipping Length\": \"\",\n        \"Shipping Width\": \"\",\n        \"Shipping Height\": \"\",\n        \"Shipping Weight\": \"\",\n        \"Product Group Image URL 1\": \"\",\n        \"Product Group Image URL 2\": \"\",\n        \"Product Group Image URL 3\": \"\",\n        \"Product Group Image URL 4\": \"\",\n        \"Video URL 1\": \"\",\n        \"Video URL 2\": \"\",\n        \"Video URL 3\": \"\",\n        \"Video URL 4\": \"\",\n        Material: \"\",\n        \"Length Unit\": \"\",\n        \"Width Unit\": \"\",\n        Price: \"\",\n        Color: \"\",\n        Size:\"\",\n        Quantity: \"\",\n        \"Listing Status\": \"\",\n      });\n    }\n\n    return _data;\n  };\n\n  return (\n    <>\n      {isLoading ? (\n     <div>\n      <LinearProgress color=\"inherit\" />\n Please Wait, It may take 3-4 minutes \n     </div>  \n    )\n      : null}\n\n      <Grid container spacing={2} direction=\"row\">\n        <Grid item lg={6}>\n          <div className=\"request-to-sell-wrap\">\n            <section className=\"request-form-section non-active\">\n              <div className=\"container\">\n                <div className=\"request-form-card\">\n                  <Grid\n                    direction=\"column\"\n                    container\n                    alignItems=\"center\"\n                    spacing={2}\n                  >\n                    <Grid item>\n                      <Typography component=\"h6\" variant=\"h6\">\n                        DOWNLOAD PRODUCT TEMPLATE\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                      <Grid\n                        container\n                        direction=\"row\"\n                        alignItems=\"center\"\n                        justifyContent={\"center\"}\n                        spacing={2}\n                      >\n                        <Grid item>\n                          {categoryList.length && (\n                            <Autocomplete\n                              defaultValue={\"Select a category\"}\n                              disablePortal\n                              id=\"combo-box-demo\"\n                              options={categoryList}\n                              sx={{ width: 300 }}\n                              renderInput={(params) => (\n                                <TextField {...params} />\n                              )}\n                              onChange={(event: any, newValue: string | null) =>\n                                setCategoryValue(newValue)\n                              }\n                            />\n                          )}\n                        </Grid>\n                      \n                        <Grid item>\n                          <ExcelDownloader\n                            btnName={\"Download Product Template\"}\n                            fileName={\"ProductTemplate\"}\n                            categoryName={categoryValue}\n                            onBeforeDownload={onBeforeDownload}\n                          />\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n            </section>\n          </div>\n        </Grid>\n        <Grid item lg={6}>\n          <div className=\"request-to-sell-wrap\">\n            <section className=\"request-form-section non-active\">\n              <div className=\"container\">\n                <div className=\"request-form-card\">\n                  <Grid\n                    direction=\"column\"\n                    container\n                    alignItems=\"center\"\n                    spacing={2}\n                  >\n                    <Grid item>\n                      <Typography component=\"h6\" variant=\"h6\">\n                        UPLOAD PRODUCTS EXCEL FILE\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                      <Grid\n                        container\n                        direction=\"column\"\n                        alignItems=\"center\"\n                        spacing={8}\n                      >\n                        <Grid item>\n                          <ExcelToJson />\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n            </section>\n          </div>\n        </Grid>\n      </Grid>\n      <Grid\n        direction=\"column\"\n        container\n        alignItems=\"center\"\n        justifyContent={\"center\"}\n      >\n        <Grid item>\n          <Paper\n            sx={{\n              borderRadius: 13,\n              mx: \"2px\",\n              border: `3px solid #0068ff`,\n            }}\n            elevation={24}\n          >\n            <Box sx={{ minWidth: 1000 }} p={2}>\n              <div\n                style={{\n                  textAlign: \"center\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"inline-flex\",\n                    alignItems: \"center\",\n                    flexWrap: \"wrap\",\n                  }}\n                >\n                  <InfoIcon\n                    sx={{ color: \"red\", marginRight: \"10px\", fontSize: \"40px\" }}\n                  />\n                  <p className=\"table-heading\">Instructions</p>\n                </div>\n              </div>\n              <div className=\"container container-margin\">\n                <div className=\"auth-form-wrap-home\">\n                  <Card sx={{ minWidth: 1000 }}>\n                    <CardContent>\n                      <Typography sx={{ fontSize: 30 }} color=\"#0f5b9e\">\n                        Follow the below steps to upload your products in our\n                        product's database.\n                      </Typography>\n                      <br />\n                      <Typography sx={{ fontSize: 20 }} color=\"InfoText\">\n                        1. Under 'DOWNLOAD PRODUCT TEMPLATE' section, Select a\n                        category from the category dropdown and click on\n                        'DOWNLOAD EXCEL SHEET' button. An excel sheet will get\n                        downloaded on your system named 'ProductTemplate.xlsx'\n                      </Typography>\n                      <br />\n\n                      <Typography sx={{ fontSize: 17 }} color=\"InfoText\">\n                        2. In the downloaded excel file, you will find three\n                        sheets\n                        <br />\n                        <List>\n                          <ListItem>\n                            <ChevronRightIcon />\n                            data - Template file that contains all the columns\n                            you need to fill. Each column represents a property\n                            of the product. Eg - title, description, price,\n                            quantity etc.\n                          </ListItem>\n                          <ListItem>\n                            <ChevronRightIcon />\n                            Instructions - You can refer to this sheet in order\n                            to understand the meaning of each column that needs\n                            to filled.\n                          </ListItem>\n                          <ListItem>\n                            <ChevronRightIcon />\n                            Example - You can refer to this sheet in order to\n                            get an idea how to fill the sheet 'data'.\n                          </ListItem>\n                        </List>\n                      </Typography>\n                      <Typography sx={{ fontSize: 20 }} color=\"InfoText\">\n                        3. Fom section 'UPLOAD PRODUCTS EXCEL FILE' click on\n                        'ADD ATTACHEMENTS' and select the updated excel file.\n                      </Typography>\n                      <Typography sx={{ fontSize: 20 }} color=\"InfoText\">\n                        4. Finally your products will be updated in our system.\n                      </Typography>\n                      <br />\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </Box>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/productUpdate/index.tsx",["347","348","349","350","351","352","353","354","355","356"],"import { Autocomplete, Grid, List, ListItem, Typography } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { categoriesStart } from \"redux/reducers/categories\";\nimport { RootState } from \"redux/store\";\nimport { ExcelDownloaderTemplate } from \"./excelDownloaderTemplate\";\nimport ExcelToJson from \"./uploadExcel\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport InfoIcon from \"@mui/icons-material/Info\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Card from \"@mui/material/Card\";\nimport { taxCodesStart } from \"redux/reducers/taxCodes\";\n\nimport \"../../../styles/common.css\";\nimport \"./style.css\";\n\nexport const ProductQtyPriceUpdate = () => {\n  const dispatch = useDispatch();\n  const [categoryList, setCategoryList] = useState([]);\n  const [taxCodesList, setTaxCodes] = useState([]);\n  const [categoryValue, setCategoryValue] = useState<string | null>();\n  const [taxCodeValue, setTaxCodeValue] = useState<string | null>();\n  const [data, setData] = useState<any>([]);\n  useEffect(() => {\n    dispatch(categoriesStart());\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(taxCodesStart());\n  }, [dispatch]);\n\n  const categories = useSelector(\n    (state: RootState) => state.categories.categories\n  );\n\n  const taxCodes = useSelector((state: RootState) => state.taxCodes.taxCodes);\n\n  useEffect(() => {\n    let _categorylist: any = [];\n\n    for (let i = 0; i < categories.length; i++) {\n      _categorylist.push(categories[i].categoryName);\n    }\n    setCategoryList(_categorylist);\n  }, [categories]);\n\n  useEffect(() => {\n    let _taxCodelist: any = [];\n\n    for (let i = 0; i < taxCodes.length; i++) {\n      _taxCodelist.push(`${taxCodes[i].name} || ${taxCodes[i].id}`);\n    }\n    setTaxCodes(_taxCodelist);\n  }, [taxCodes]);\n\n  const onBeforeDownload = () => {\n    let _data = [];\n\n    for (let i = 0; i < 1000; i++) {\n      _data.push({\n        \"Product Id\": \"\",\n        \"Sale Price\": \"\",\n        Price: \"\",\n        Quantity: \"\",\n        \"Listing Status\": \"\",\n      });\n    }\n\n    return _data;\n  };\n\n  return (\n    <>\n      <Grid container spacing={2} direction=\"row\">\n        <Grid item lg={6}>\n          <div className=\"request-to-sell-wrap\">\n            <section className=\"request-form-section non-active\">\n              <div className=\"container\">\n                <div className=\"request-form-card\">\n                  <Grid\n                    direction=\"column\"\n                    container\n                    alignItems=\"center\"\n                    spacing={2}\n                  >\n                    <Grid item>\n                      <Typography component=\"h6\" variant=\"h6\">\n                        DOWNLOAD TEMPLATE\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                      <Grid\n                        container\n                        direction=\"row\"\n                        alignItems=\"center\"\n                        justifyContent={\"center\"}\n                        spacing={2}\n                      >\n                        <Grid item>\n                          <ExcelDownloaderTemplate\n                            btnName={\"Download Template\"}\n                            fileName={\"QtyPriceTemplate\"}\n                            onBeforeDownload={onBeforeDownload}\n                          />\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n            </section>\n          </div>\n        </Grid>\n        <Grid item lg={6}>\n          <div className=\"request-to-sell-wrap\">\n            <section className=\"request-form-section non-active\">\n              <div className=\"container\">\n                <div className=\"request-form-card\">\n                  <Grid\n                    direction=\"column\"\n                    container\n                    alignItems=\"center\"\n                    spacing={2}\n                  >\n                    <Grid item>\n                      <Typography component=\"h6\" variant=\"h6\">\n                        UPLOAD PRODUCTS EXCEL FILE\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                      <Grid\n                        container\n                        direction=\"column\"\n                        alignItems=\"center\"\n                        spacing={8}\n                      >\n                        <Grid item>\n                          <ExcelToJson />\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n            </section>\n          </div>\n        </Grid>\n      </Grid>\n      <Grid\n        direction=\"column\"\n        container\n        alignItems=\"center\"\n        justifyContent={\"center\"}\n      >\n        <Grid item>\n          <Paper\n            sx={{\n              borderRadius: 13,\n              mx: \"2px\",\n              border: `3px solid #0068ff`,\n            }}\n            elevation={24}\n          >\n            <Box sx={{ minWidth: 1000 }} p={2}>\n              <div\n                style={{\n                  textAlign: \"center\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"inline-flex\",\n                    alignItems: \"center\",\n                    flexWrap: \"wrap\",\n                  }}\n                >\n                  <InfoIcon\n                    sx={{ color: \"red\", marginRight: \"10px\", fontSize: \"40px\" }}\n                  />\n                  <p className=\"table-heading\">Instructions</p>\n                </div>\n              </div>\n              <div className=\"container container-margin\">\n                <div className=\"auth-form-wrap-home\">\n                  <Card sx={{ minWidth: 1000 }}>\n                    <CardContent>\n                      <Typography sx={{ fontSize: 30 }} color=\"#0f5b9e\">\n                        Follow the below steps to upload your products in our\n                        product's database.\n                      </Typography>\n                      <br />\n                      <Typography sx={{ fontSize: 20 }} color=\"InfoText\">\n                        1. Under 'DOWNLOAD PRODUCT TEMPLATE' section, Select a\n                        category from the category dropdown and click on\n                        'DOWNLOAD EXCEL SHEET' button. An excel sheet will get\n                        downloaded on your system named 'ProductTemplate.xlsx'\n                      </Typography>\n                      <br />\n\n                      <Typography sx={{ fontSize: 17 }} color=\"InfoText\">\n                        2. In the downloaded excel file, you will find three\n                        sheets\n                        <br />\n                        <List>\n                          <ListItem>\n                            <ChevronRightIcon />\n                            data - Template file that contains all the columns\n                            you need to fill. Each column represents a property\n                            of the product. Eg - title, description, price,\n                            quantity etc.\n                          </ListItem>\n                          <ListItem>\n                            <ChevronRightIcon />\n                            Instructions - You can refer to this sheet in order\n                            to understand the meaning of each column that needs\n                            to filled.\n                          </ListItem>\n                          <ListItem>\n                            <ChevronRightIcon />\n                            Example - You can refer to this sheet in order to\n                            get an idea how to fill the sheet 'data'.\n                          </ListItem>\n                        </List>\n                      </Typography>\n                      <Typography sx={{ fontSize: 20 }} color=\"InfoText\">\n                        3. Fom section 'UPLOAD PRODUCTS EXCEL FILE' click on\n                        'ADD ATTACHEMENTS' and select the updated excel file.\n                      </Typography>\n                      <Typography sx={{ fontSize: 20 }} color=\"InfoText\">\n                        4. Finally your products will be updated in our system.\n                      </Typography>\n                      <br />\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </Box>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/OrderDetails/index.tsx",["357","358","359","360"],"import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport orderDetails, { ordersStart } from \"redux/reducers/orderDetails\";\nimport { Pagination } from \"@mui/material\";\nimport \"./style.css\";\nimport { RootState } from \"redux/store\";\nimport { acknowledgeStart } from \"redux/reducers/orderAcknowledged\";\n\nconst OrderDetails = () => {\n  const dispatch = useDispatch();\n  const orders = useSelector((state: RootState) => state.orderDetails.orders);\n  const orderCount = useSelector(\n    (state: RootState) => state.orderDetails.orderCount\n  );\n  const seller: any = useSelector((state: RootState) => state.seller.seller);\n  const orderAcknowledged: any = useSelector((state: RootState) => state.orderAcknowledged);\n  const [page, setPage] = useState(1);\n  const [orderSearchData, setOrderSearchData] = useState<any>();\n  const [searchValue, setSearchValue] = useState<any>();\n  let pageLimit = 10;\n\n  useEffect(() => {\n    if (seller) {\n      setPage(1);\n      dispatch(\n        ordersStart({ sellerId: seller._id, itemsPerPage: pageLimit, page: 1 })\n      );\n    }\n  }, [seller,orderAcknowledged]);\n\n  let pages: any = Math.ceil(orderCount / pageLimit);\n\n  const handleChangePage = (\n    event: React.ChangeEvent<unknown>,\n    value: number\n  ) => {\n    setPage(value);\n    if (seller) {\n      dispatch(\n        ordersStart({\n          sellerId: seller._id,\n          itemsPerPage: pageLimit,\n          page: value,\n        })\n      );\n    }\n  };\n\n  const filteredData = (value: any) => {\n    if (!value) {\n      return;\n    }\n    const data = orders?.filter((item: any) => {\n      return Object.values(item.Items[0].title)\n        ?.join(\"\")\n        ?.toLowerCase()\n        .includes(value?.toLowerCase());\n    });\n    return data;\n  };\n\n  const handleSearchValue = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    if (searchValue) {\n      const data = filteredData(searchValue);\n      setOrderSearchData(data);\n    }\n    if (!searchValue) {\n      setOrderSearchData(null);\n      return;\n    }\n  };\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(event.target.value);\n    if (!event.target.value) {\n      setOrderSearchData(null);\n      return;\n    }\n    if (event.target.value) {\n      const data = filteredData(event.target.value);\n      setOrderSearchData(data);\n    }\n  };\n\n  const singleOrderTemplate = (order: any, index: number) => {\n    const payoutTime = order.payoutDetails\n      ? new Date(1000 * order.payoutDetails.createdAt).toString()\n      : \"Not applicable\";\n    return (\n      <div key={index} className=\"box-sh\">\n        <div className=\"wishlist-detail d-flex\">\n          <div>Order Details</div>\n\n          <div\n            className=\"d-flex w-100 justify-content-between\"\n            style={{ paddingLeft: 50 }}\n          >\n            <div className=\"my-order-content-wrap\">\n              <div>\n                <p>\n                  <b>Order ID : </b>\n                  {order.ID}\n                </p>\n              </div>\n\n              <div>\n                <p>\n                  <b>Order Status : </b>\n                  {order.OrderStatus === \"ReleasedForShipment\"\n                    ? order.OrderStatus\n                    : order.OrderStatus.toUpperCase()}\n                </p>\n              </div>\n              <div>\n                <p>\n                  <b>Payment Status : </b>\n                  {order.OrderPaymentStatus}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"p-4\">\n              <div>\n                <p>\n                  {\" \"}\n                  <b>Order Time : </b>\n                  {order.OrderDateUtc}\n                </p>\n              </div>\n\n              <div>\n                <p>\n                  <b>Order Total Price : </b>${order.TotalPrice.toFixed(2)}\n                </p>\n              </div>\n              <div>\n                <p>\n                  {\" \"}\n                  <b>Order Total Tax : </b>${order.TotalTaxPrice.toFixed(2)}\n                </p>\n              </div>\n            </div>\n            <div className=\"p-4\">\n              <div>\n                <p>\n                  <b>Payment Type : </b>\n                  {order.PaymentType}\n                </p>\n              </div>\n\n              <div>\n                <p>\n                  <b>Resell Cut : </b>${order.TotalPaysferAmount.toFixed(2)}\n                </p>\n              </div>\n              <div>\n                <p>\n                  <b>Resell Amount : </b>${order.TotalSellerAmount.toFixed(2)}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        {order.Items &&\n          order.Items.map((item: any, index: number) => (\n            <>\n              <div className=\"wishlist-detail d-flex\" key={index}>\n                <div>Order Items Details</div>\n                <div className=\"d-flex w-100 justify-content-between\">\n                  <div\n                    className=\"d-flex my-order-content-wrap\"\n                    style={{ width: \"100%\" }}\n                  >\n                    <div className=\"my-order-product-img\">\n                      <img src={item.image} />\n                    </div>\n\n                    <div className=\"product-detail-text\">\n                      <div>\n                        <p>\n                          <b>Title : </b> {item.title}\n                        </p>\n                        <p>\n                          <b>Item Price : </b> ${item.UnitPrice.toFixed(2)}\n                        </p>\n                        <p>\n                          <b>Quantity : </b> {item.Quantity}\n                        </p>\n\n                        {/* <p className=\"product-text\">{item.description}</p> */}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row\">\n                <button\n                  className=\"btn btn-primary\"\n                  type=\"button\"\n                  onClick={()=>{\n                    dispatch(\n                        acknowledgeStart({ id:order?.ID,sellerId: item?.sellerId })\n                      );\n                  }}\n                  style={{ position: \"relative\", left: \"15px\" }}\n                >\n                  Acknowledge\n                </button>\n              </div>\n            </>\n          ))}\n        {/* <div className=\"wishlist-detail d-flex\">\n                    <div>Payout Details</div>\n                    <div className=\"d-flex w-100 justify-content-between\">\n                        {console.log('orderorder',order)}\n                        <div>\n                            {order.payoutDetails ?\n                                <>\n                                    <p><b>Payout Id : </b> {order.payoutDetails._id}</p>\n                                    <p><b>Payout Status : </b> {order.payoutDetails.PayoutStatus.toUpperCase()}</p>\n                                    <p><b>Payout Stripe transfer ID : </b> {order.payoutDetails.transferID}</p>\n                                    <p><b>Payout Time : </b> {payoutTime}</p>\n                                </>\n                                :\n                                <>\n                                    <p style={{ color: \"red\", padding: 10, paddingLeft: 50 }}>Payout Pending...</p>\n                                </>\n                            }\n\n                        </div>\n                    </div>\n                </div> */}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <section className=\"product-detils-section custom-spacer\">\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-md-9\">\n              <div className=\"gift-card-text\">\n                <p>My Orders</p>\n              </div>\n              <div className=\"my-order-searchbar\">\n                <form onSubmit={handleSearchValue}>\n                  <div className=\"form-group\">\n                    <input\n                      onChange={handleSearch}\n                      type=\"text\"\n                      className=\"form-control\"\n                      id=\"exampleFormControlInput1\"\n                      placeholder=\"Search your order here\"\n                    />\n                  </div>\n                </form>\n                {orders && orders.length === 0 ? (\n                  <p className=\"empty-cart\">\n                    <h2>No Orders Found</h2>\n                  </p>\n                ) : null}\n                {orderSearchData && orderSearchData.length === 0 ? (\n                  <p className=\"empty-cart\">\n                    <h2>No Orders Found</h2>\n                  </p>\n                ) : null}\n              </div>\n              <div className=\"my-orders-card-wrap\">\n                {orderSearchData\n                  ? orderSearchData &&\n                    orderSearchData.map((item: any, index: number) =>\n                      singleOrderTemplate(item, index)\n                    )\n                  : orders &&\n                    orders.map((item: any, index: number) =>\n                      singleOrderTemplate(item, index)\n                    )}\n                <Pagination\n                  count={pages}\n                  page={page}\n                  onChange={handleChangePage}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default OrderDetails;\n","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/BankDetails/index.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/components/Home/index.tsx",["361"],"import Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport Grid from '@mui/material/Grid';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport './style.css';\nimport { List, ListItem } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\n\nconst bull = (\n  <Box\n    component=\"span\"\n    sx={{ display: 'inline-block', mx: '2px', transform: 'scale(0.8)' }}\n  >\n    •\n  </Box>\n);\n\nconst Home = () => {\n  const navigate = useNavigate();\n  return (\n    <Grid direction='column' container alignItems='center' justifyContent={\"center\"}>\n      <Grid item>\n        <div className=\"container\">\n          <div className=\"auth-form-wrap-home\">\n            <Card sx={{ minWidth: 1000 }}>\n\n              <CardContent>\n                <Typography sx={{ fontSize: 30 }} color=\"#0f5b9e\">\n                  Are you ready to join\n                  the Resell Marketplace\n                  seller community?\n                </Typography>\n                <br /><br />\n                <Typography sx={{ fontSize: 20 }} color=\"InfoText\">\n                  Remember these helpful tips before you start to fill out your application:\n                </Typography><br />\n\n                <Typography sx={{ fontSize: 17 }} color=\"InfoText\">\n                  1. Your progress will not be saved if you close this browser tab.<br />\n                  <List>2. Please have this required information available when completing the application:\n\n                    <ListItem><ChevronRightIcon/>US Business Tax ID (SSN not accepted)</ListItem>\n                    <ListItem><ChevronRightIcon/>W9 or W8 and EIN Verification Letter from the Department of Treasury that verifies your US business address or place of physical operations</ListItem>\n                    <ListItem><ChevronRightIcon/>Address or place of physical operations</ListItem>\n                    <ListItem><ChevronRightIcon/>Your Business address</ListItem>\n                    <ListItem><ChevronRightIcon/>Planned integration method for your product catalog (bulk upload, API, solution provider)</ListItem>\n                    <ListItem><ChevronRightIcon/>Primary product categories, catalog size and related information (e.g. total SKUs you will be selling on paysfer.com initially with verified UPC information, and used vs. refurbished etc.)</ListItem>\n                  </List>\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Button id=\"requestToSell\" onClick={() => navigate('/seller/onboarding/application-start')} size=\"large\">Request To Sell</Button>\n              </CardActions>\n            </Card>\n          </div>\n        </div>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default Home;\n","/Users/pulkit/Desktop/resell-marketplace-main/src/config/firebase.ts",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/productUpdate/uploadExcel.tsx",["362","363","364","365"],"import { Button, Chip } from \"@mui/material\";\nimport React, { SyntheticEvent, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { bulkUploadStart } from \"redux/reducers/bulkUpload\";\nimport snack from \"components/wrapper/snack\";\nimport * as XLSX from \"xlsx\";\nimport { updateProductQtyStart } from \"redux/reducers/updateProductQty\";\nimport { RootState } from \"redux/store\";\n\nexport const ExcelToJson = () => {\n  const [file, setFile] = useState<any>();\n  const dispatch = useDispatch();\n  const seller = useSelector(\n    (state: RootState) => state.seller.seller\n  );\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    if(e.target.files)\n    setFile(e.target.files);\n  };\n\n  const createProductData = (productData: any) => {\n    let data: any[] = [];\n    let _productData: any[] = [];\n    productData = JSON.parse(productData);\n\n    productData.forEach(function (item: any) {\n      var existing = data.filter(function (v, i) {\n        return v[\"parentSellerSKU\"] == item[\"Parent Seller SKU\"];\n      });\n\n      if (existing.length) {\n        var existingIndex = data.indexOf(existing[0]);\n        //1. Seller SKU\n        data[existingIndex][\"SellerSKU\"] = [\n          ...data[existingIndex][\"SellerSKU\"],\n          item[\"Seller SKU\"],\n        ];\n      \n        //4. Sale Price\n        data[existingIndex][\"saleprice\"] = [\n          ...data[existingIndex][\"saleprice\"],\n          item[\"Sale Price\"],\n        ];\n       \n        // 12. Price\n        data[existingIndex][\"price\"] = [\n          ...data[existingIndex][\"price\"],\n          item[\"Price\"],\n        ];\n        // 13. Quantity\n        data[existingIndex][\"Quantity\"] = [\n          ...data[existingIndex][\"Quantity\"],\n          item[\"Quantity\"],\n        ];\n        // 14. Listing Status\n        data[existingIndex][\"ListingStatus\"] = [\n          ...data[existingIndex][\"ListingStatus\"],\n          item[\"Listing Status\"],\n        ];\n\n        \n      } else {\n        data.push({\n          saleprice: [item[\"Sale Price\"]],\n          parentSellerSKU: item[\"Parent Seller SKU\"],\n          price: [item[\"Price\"]],\n          Quantity: [item[\"Quantity\"]],\n          SellerSKU: [item[\"Seller SKU\"]],\n          ListingStatus: [item[\"Listing Status\"]],\n        });\n      }\n    });\n\n    for (let i =0; i < data.length-1; i++) {\n      _productData.push(data[i]);\n    }\n\n    data = _productData;\n    console.log('datatatatatatatta',{data})\n    dispatch(updateProductQtyStart({ data }));\n  };\n\n  const readFile = () => {\n    if (!file) {\n      snack.error(\"Please select a file to upload\");\n      return;\n    }\n    var f = file.file;\n    const reader = new FileReader();\n    reader.onload = (evt: any) => {\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: \"binary\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data: any = XLSX.utils.sheet_to_csv(ws);\n      /* Update state */\n      let _products = convertToJson(data);\n      console.log(_products); // shows data in json format\n      const products = createProductData(_products);\n    };\n    reader.readAsBinaryString(f);\n  };\n\n  const convertToJson = (csv: any) => {\n    var lines = csv.split(\"\\n\");\n\n    var result = [];\n\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length - 1; i++) {\n      var obj: any = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n    }\n\n    return JSON.stringify(result);\n  };\n\n  const uploadDocument = (e: SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!seller.firstName || !seller.lastName || !seller.email) {\n      snack.error(\n        \"Seller Inforamtion not available, please Login again\"\n      );\n    }\n\n    if (!file?.length) {\n      alert(\"Please select documents to upload\");\n    } else {\n      dispatch(\n        updateProductQtyStart({ \n          documents: file,\n          firstName: seller.firstName,\n          lastName: seller.lastName,\n          email: seller.email,\n          sellerId:seller.sellerId\n        })\n      );\n    }\n  };\n\n  return (\n    <>\n      <div className=\"form-group\">\n        <div className=\"upload-btn-wrapper\">\n          <div className=\"d-flex upload-btn-wrapper-content-wrap\">\n            <div className=\"upload-btn-wrapper-content d-flex align-items-center\">\n              <Button color=\"primary\" size=\"large\">\n                <i className=\"fas fa-paperclip\"></i> Add Attachements{\" \"}\n              </Button>\n              {file ? null : <p>Or drop files</p>}\n              <input\n                accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                type=\"file\"\n                multiple\n                name=\"myfile\"\n                onChange={onChange}\n              />\n              {file ? <Chip label={file[0].name} /> : null} \n            </div>\n          </div>\n        </div>\n        <button className=\"btn btn-primary\" onClick={uploadDocument}> \n          UPLOAD\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default ExcelToJson;\n","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/productUpdate/excelDownloaderTemplate.tsx",["366"],"import * as XLSX from \"xlsx\";\nimport FileSaver from \"file-saver\";\nimport TemplateData from \"utils/data/templateData/qtyPrice\";\nimport snack from \"components/wrapper/snack\";\n\nexport const ExcelDownloaderTemplate = (props: any) => {\n  const download = () => {\n   \n    var data = props.onBeforeDownload();\n    let header = [...TemplateData.product];\n    const ws = XLSX.utils.book_new();\n    const ws2 = XLSX.utils.json_to_sheet(TemplateData.Instructions);\n    const ws3 = XLSX.utils.json_to_sheet(TemplateData.Example);\n\n    XLSX.utils.sheet_add_aoa(ws, [header]);\n    XLSX.utils.sheet_add_json(ws, data, { origin: \"A2\", skipHeader: true });\n    // data sheet\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    // Instruction sheet\n    XLSX.utils.book_append_sheet(wb, ws2, \"Instructions\");\n    // Example sheet\n    XLSX.utils.book_append_sheet(wb, ws3, \"Example\");\n\n    const excelBuffer = XLSX.write(wb, {\n      bookType: \"xlsx\",\n      type: \"array\",\n      cellStyles: true,\n    });\n    const finalData = new Blob([excelBuffer], { type: \"xlsx\" });\n    FileSaver.saveAs(finalData, \"qtyPriceTemplate.xlsx\");\n  };\n\n  return (\n    <>\n      <button className=\"btn btn-primary\" onClick={download}>\n        DOWNLOAD EXCEL SHEET\n      </button>\n    </>\n  );\n};\n","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/BulkUpload/uploadExcel.tsx",["367","368","369","370"],"import { Button, Chip } from \"@mui/material\";\nimport React, { SyntheticEvent, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { bulkUploadStart, startLoading } from \"redux/reducers/bulkUpload\";\nimport snack from \"components/wrapper/snack\";\nimport * as XLSX from \"xlsx\";\nimport { RootState } from \"redux/store\";\n\nexport const ExcelToJson = () => {\n  const [file, setFile] = useState<any>();\n  const dispatch = useDispatch();\n  const seller = useSelector(\n    (state: RootState) => state.seller.seller\n  );\n  const user = useSelector(\n    (state: RootState) => state.user.user\n  );\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    if(e.target.files)\n    setFile(e.target.files);\n  };\n\n \n\n  const uploadDocument = (e: SyntheticEvent) => {\n    e.preventDefault();\n    if (!file?.length) {\n      alert(\"Please select documents to upload\");\n    } else {\n      dispatch(\n        bulkUploadStart({\n          documents: file,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          email: user.email,\n          username: user.username,\n          userId:user[\"_id\"]\n        })\n      );\n    }\n  };\n  return (\n    <>\n      <div className=\"form-group\">\n        <div className=\"upload-btn-wrapper\">\n          <div className=\"d-flex upload-btn-wrapper-content-wrap\">\n            <div className=\"upload-btn-wrapper-content d-flex align-items-center\">\n              <Button color=\"primary\" size=\"large\">\n                <i className=\"fas fa-paperclip\"></i> Add Attachements{\" \"}\n              </Button>\n              {file ? null : <p>Or drop files</p>}\n              <input\n                accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                type=\"file\"\n                multiple\n                name=\"myfile\"\n                onChange={onChange}\n              />\n              {file ? <Chip label={file[0].name} /> : null}\n            </div>\n          </div>\n        </div>\n        <button className=\"btn btn-primary\" onClick={uploadDocument}>\n          UPLOAD\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default ExcelToJson;\n","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/BulkUpload/excelDownloader.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/components/SetPassword/tokenExpired.tsx",["371","372","373","374","375","376","377","378","379"],"import React, { SyntheticEvent, useState } from \"react\";\nimport {\n  Typography,\n  Grid,\n  TextField,\n  OutlinedInput,\n  InputAdornment,\n  IconButton,\n  Link\n} from '@mui/material';\n\nimport './style.css';\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from 'react';\nimport { resendEmail } from \"redux/reducers/seller\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nconst TokenExpired = ({ email }:any) => {\n  const dispatch = useDispatch();\n  const params = useParams();\n  const token = params.token\n  const resendSellerEmail = () => {\n    dispatch(resendEmail({ token }))\n  }\n\n  return (\n    <Grid direction='column' container alignItems='center'>\n      <Grid item>\n        <Typography className={'heading'} component=\"h1\" variant=\"h5\">\n          Link Expired\n        </Typography>\n      </Grid>\n      <Grid item>\n        <section className=\"auth-section\">\n          <div className=\"container\">\n            <div className=\"auth-form-wrap\">\n\n                <button type=\"submit\" onClick={resendSellerEmail} className=\"btn btn-primary\">Resend Email</button>\n            </div>\n          </div>\n        </section>\n      </Grid>\n    </Grid >\n  );\n}\n\nexport default TokenExpired;\n","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/DirectSellers/onBoarding/index.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/utils/jwtPayload.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/DirectSellers/onBoarding/confirmations.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/DirectSellers/onBoarding/shippingOperations.tsx",["380","381","382","383","384","385","386"],"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Link,\n  RadioGroup,\n  TextField,\n  FormControlLabel,\n  Radio,\n  Modal,\n  Box,\n  Grid,\n} from \"@mui/material\";\nimport { Checkbox, FormControl, FormGroup } from \"@mui/material\";\nimport EditableTable from \"./editableTable\";\n\nexport default function ShippingOperations(props: any) {\n  const navigate = useNavigate();\n  const [open, setOpen] = useState(false);\n  const { seller, setSeller, setActiveStep } = props;\n\n  const style = {\n    position: \"absolute\" as \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    overflow: \"auto\",\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4,\n    display: \"flex\",\n  };\n\n  const onSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    console.log(seller);\n    setActiveStep(4);\n    navigate(\"/seller/onboarding/confirmation\");\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSeller({\n      ...seller,\n      currentShippingMethods: {\n        ...seller.currentShippingMethods,\n        [event.target.name]: event.target.checked,\n      },\n    });\n  };\n\n  return (\n    <div className=\"request-to-sell-wrap\">\n      <section className=\"request-form-section non-active\">\n        <div className=\"container\">\n          <div className=\"request-form-card\">\n            <div className=\"request-arrow-icon\"></div>\n            <form>\n              <label htmlFor=\"\">\n                Specify your information for other Retail Marketplaces\n              </label>\n              <div className=\"row\">\n                <EditableTable seller={seller} setSeller={setSeller} />\n              </div>\n            </form>\n          </div>\n        </div>\n      </section>\n      <section className=\"request-form-section non-active\">\n        <div className=\"container\">\n          <div className=\"request-form-card\">\n            <div className=\"request-arrow-icon\"></div>\n            <form>\n              <label className=\"required-field\" htmlFor=\"\">\n                How are you planning to integrate with Paysfer?\n              </label>\n              <div className=\"row\">\n                <div className=\"col-md-4\">\n                  <div className=\"form-group\">\n                    <div className=\"d-flex align-items-center\">\n                      <RadioGroup\n                        row\n                        aria-label=\"paysferIntegrationMode\"\n                        name=\"row-radio-buttons-group\"\n                      >\n                        <FormControlLabel\n                          value=\"Bulk Upload\"\n                          control={\n                            <Radio\n                              checked={\n                                seller.paysferIntegrationMode ===\n                                \"Bulk Upload\"\n                              }\n                              onChange={(e) => {\n                                setSeller({\n                                  ...seller,\n                                  paysferIntegrationMode: e.target.value,\n                                });\n                              }}\n                            />\n                          }\n                          label=\"Bulk Upload - for a few thousand products- via Excel sheet\"\n                        />\n                        <FormControlLabel\n                          value=\"API Integration\"\n                          control={\n                            <Radio\n                              checked={\n                                seller.paysferIntegrationMode ===\n                                \"API Integration\"\n                              }\n                              onChange={(e) => {\n                                setSeller({\n                                  ...seller,\n                                  paysferIntegrationMode: e.target.value,\n                                });\n                              }}\n                            />\n                          }\n                          label=\"API Integration - for large sellers\"\n                        />\n                        <FormControlLabel\n                          value=\"Simple Integration\"\n                          control={\n                            <Radio\n                              checked={\n                                seller.paysferIntegrationMode ===\n                                \"Simple Integration\"\n                              }\n                              onChange={(e) => {\n                                setSeller({\n                                  ...seller,\n                                  paysferIntegrationMode: e.target.value,\n                                });\n                              }}\n                            />\n                          }\n                          label=\"Simple Integration - few products\"\n                        />\n                        <FormControlLabel\n                          value=\"Solution Providers\"\n                          control={\n                            <Radio\n                              checked={\n                                seller.paysferIntegrationMode ===\n                                \"Solution Providers\"\n                              }\n                              onChange={(e) => {\n                                setSeller({\n                                  ...seller,\n                                  paysferIntegrationMode: e.target.value,\n                                });\n                              }}\n                            />\n                          }\n                          label=\"Solution Providers (Channeladvisor, Big commerce etc)\"\n                        />\n                      </RadioGroup>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </section>\n      <section className=\"request-form-section non-active\">\n        <div className=\"container\">\n          <div className=\"request-form-card\">\n            <div className=\"col-md-12\">\n              <div className=\"w-100 btn-listing current-shipping\">\n                <FormControl\n                  sx={{ m: 3 }}\n                  component=\"fieldset\"\n                  variant=\"standard\"\n                >\n                  <label htmlFor=\"\">\n                    Current shipping methods, select all that apply\n                  </label>\n                  <FormGroup>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          size=\"small\"\n                          checked={seller.currentShippingMethods[\"UPS\"]}\n                          onChange={handleChange}\n                          name=\"UPS\"\n                        />\n                      }\n                      label=\"UPS\"\n                    />\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          size=\"small\"\n                          checked={seller.currentShippingMethods[\"FedEx\"]}\n                          onChange={handleChange}\n                          name=\"FedEx\"\n                        />\n                      }\n                      label=\"FedEx\"\n                    />\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          size=\"small\"\n                          checked={seller.currentShippingMethods[\"USPS\"]}\n                          onChange={handleChange}\n                          name=\"USPS\"\n                        />\n                      }\n                      label=\"USPS\"\n                    />\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          size=\"small\"\n                          checked={seller.currentShippingMethods[\"DHL\"]}\n                          onChange={handleChange}\n                          name=\"DHL\"\n                        />\n                      }\n                      label=\"DHL\"\n                    />\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          size=\"small\"\n                          checked={seller.currentShippingMethods[\"FBA\"]}\n                          onChange={handleChange}\n                          name=\"FBA\"\n                        />\n                      }\n                      label=\"FBA\"\n                    />\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          size=\"small\"\n                          checked={seller.currentShippingMethods[\"Others\"]}\n                          onChange={handleChange}\n                          name=\"Others\"\n                        />\n                      }\n                      label=\"Others\"\n                    />\n                  </FormGroup>\n                </FormControl>\n              </div>\n            </div>\n            {/* <div className=\"col-md-4\">\n              <label htmlFor=\"\">*WareHouse Address</label>\n              <div className=\"warehouse-address-card\">\n                <button onClick={() => setOpen(true)} className=\"btn blue-btn\">+ Add Location</button>\n                <Modal\n                  open={open}\n                  onClose={() => setOpen(false)}\n                >\n                  <Box sx={style}>\n                    <Grid direction={'row'} spacing={4} justifyContent=\"center\" alignContent={\"center\"}>\n                      <Grid item>\n                        <TextField\n                          placeholder='Street'\n                          name='street'\n                          onChange={(e) => setSeller({ ...seller, wareHouseAddress: { ...seller.wareHouseAddress, street: e.target.value } })}\n                        />\n                      </Grid>\n\n                      <Grid item>\n                        <TextField\n                          placeholder='City'\n                          name='city'\n                          onChange={(e) => setSeller({ ...seller, wareHouseAddress: { ...seller.wareHouseAddress, city: e.target.value } })}\n                        />\n                      </Grid>\n\n                      <Grid item>\n                        <TextField\n                          placeholder='State'\n                          name='state'\n                          onChange={(e) => setSeller({ ...seller, wareHouseAddress: { ...seller.wareHouseAddress, state: e.target.value } })}\n                        />\n                      </Grid>\n                      <Grid item>\n                        <TextField\n                          placeholder='Country'\n                          name='country'\n                          onChange={(e) => setSeller({ ...seller, wareHouseAddress: { ...seller.wareHouseAddress, country: e.target.value } })}\n                        />\n                      </Grid>\n\n                      <Grid item>\n                        <TextField\n                          placeholder='Postal Code'\n                          name='postalCode'\n                          onChange={(e) => setSeller({ ...seller, wareHouseAddress: { ...seller.wareHouseAddress, postalCode: e.target.value } })}\n                        />\n                      </Grid>\n\n                      <Grid item><button className=\"btn btn-primary\" onClick={() => setOpen(false)}>Save</button></Grid>\n                    </Grid>\n                  </Box>\n                </Modal>\n              </div>\n            </div> */}\n          </div>\n        </div>\n      </section>\n      <section className=\"request-form-section non-active\">\n        <div className=\"container\">\n          <div className=\"request-form-card\">\n            <div className=\"col-md-8\">\n              <div className=\"form-group\">\n                <label htmlFor=\"briefOnFitForMarketPlace\">\n                  Why would you be a good fit for Paysfer Marketplace?\n                </label>\n                <TextField\n                  value={seller.briefOnFitForMarketPlace}\n                  rows={5}\n                  multiline\n                  className={\"mui-text-field\"}\n                  color=\"primary\"\n                  name=\"briefOnFitForMarketPlace\"\n                  variant=\"outlined\"\n                  fullWidth\n                  id=\"briefOnFitForMarketPlace\"\n                  autoFocus\n                  onChange={(e) =>\n                    setSeller({\n                      ...seller,\n                      briefOnFitForMarketPlace: e.target.value,\n                    })\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"request-btn-wrap\">\n              <div className=\"btn-container\">\n                <button\n                  onClick={() => {\n                    window.scrollTo(0, 0);\n                    navigate(\"/seller/onboarding/product-and-integration\");\n                    setActiveStep(2);\n                  }}\n                  className=\"btn btn-primary\"\n                >\n                  Back\n                </button>\n                <button onClick={onSubmit} className=\"btn btn-primary\">\n                  Next\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/DirectSellers/onBoarding/productIntegration.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/DirectSellers/onBoarding/companyRegistration.tsx",["387","388","389"],"import {\n  RadioGroup,\n  TextField,\n  FormControlLabel,\n  Radio,\n  Chip,\n  Tooltip,\n  TooltipProps,\n  tooltipClasses,\n} from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\nimport InfoIcon from \"@mui/icons-material/Info\";\nimport snack from \"components/wrapper/snack\";\nimport React, { SyntheticEvent, useState } from \"react\";\nimport PhoneInput from \"react-phone-input-2\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { uploadDocumentsStart } from \"redux/reducers/seller\";\nimport { CountryDropdown, RegionDropdown } from \"react-country-region-selector\";\nimport {\n  containsAlphabeticalLetters,\n  isEmail,\n  isPhoneNumber,\n  isCompanyName,\n} from \"utils/validations\";\n\nimport \"./style.css\";\n\nexport default function CompanyRegistration(props: any) {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { seller, setSeller, setActiveStep } = props;\n  const [error, setError] = useState({\n    firstName: {\n      err: false,\n      msg: \"\",\n    },\n    lastName: {\n      err: false,\n      msg: \"\",\n    },\n    email: {\n      err: false,\n      msg: \"\",\n    },\n    confirmEmail: {\n      err: false,\n      msg: \"\",\n    },\n    currentShippingMethods: {\n      err: false,\n      msg: \"\",\n    },\n    country: {\n      err: false,\n      msg: \"\",\n    },\n  });\n\n  const isEmptyFields = () => {\n    let isfieldsInvalid = false;\n    let validationError = false;\n    let errors: any = {};\n\n    const arr: string[] = [\n      \"firstName\",\n      \"lastName\",\n      \"email\",\n      \"confirmEmail\",\n      \"country\",\n    ];\n\n    for (let i = 0; i < arr.length; i++) {\n      if (!seller[arr[i]]) {\n        errors = {\n          ...errors,\n          [arr[i]]: {\n            err: true,\n            msg: \"Required\",\n          },\n        };\n      }\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n      let fieldsInvalid = !!errors?.[arr[i]]?.err;\n      if (fieldsInvalid) {\n        isfieldsInvalid = fieldsInvalid;\n      }\n    }\n    for (let i = 0; i < arr.length; i++) {\n      let validateError = !!error?.[arr[i] as keyof typeof error]?.err;\n      if (validateError) {\n        validationError = validateError;\n      }\n    }\n\n    setError((prevState) => ({\n      ...prevState,\n      ...errors,\n    }));\n\n    return { isfieldsInvalid, validationError };\n  };\n\n  const onSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    const fieldsError = isEmptyFields();\n\n    if (fieldsError.isfieldsInvalid || fieldsError.validationError) return;\n\n    if (seller.email !== seller.confirmEmail) {\n      alert(\"email and confirm email should be same\");\n      return;\n    }\n    console.log(seller);\n    setActiveStep(2);\n    navigate(\"/seller/onboarding/product-and-integration\");\n  };\n\n  const validateName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let name: string = e.target.name,\n      _name: string = \"\",\n      err: boolean = false,\n      msg: string = \"\";\n\n    name === \"firstName\" ? (_name = \"first\") : (_name = \"last\");\n\n    if (\n      !containsAlphabeticalLetters(e.target.value) ||\n      e.target.value.trim() === \"\"\n    ) {\n      err = true;\n      msg = `Please enter a valid ${_name} name`;\n    } else {\n      err = false;\n    }\n\n    setSeller({ ...seller, [name]: e.target.value });\n\n    setError((prevState) => ({\n      ...prevState,\n      [name]: {\n        err,\n        msg,\n      },\n    }));\n  };\n\n  const validateLegalCompanyName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let name: string = e.target.name,\n      err: boolean = false,\n      msg: string = \"\";\n\n    if (!isCompanyName(e.target.value) || e.target.value.trim() === \"\") {\n      err = true;\n      msg = `Please enter a valid Comapny Name`;\n    } else {\n      err = false;\n      msg = \"\";\n    }\n    setSeller({ ...seller, [name]: e.target.value });\n\n    setError((prevState) => ({\n      ...prevState,\n      [name]: {\n        err,\n        msg,\n      },\n    }));\n  };\n\n  const validateEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let msg: string = \"\",\n      err: boolean = false;\n\n    let email = e.target.value;\n\n    if (!isEmail(email)) {\n      err = true;\n      msg = \"Please enter a valid email address\";\n    } else {\n      err = false;\n    }\n    setSeller({ ...seller, [e.target.name]: e.target.value });\n\n    setError((prevState) => ({\n      ...prevState,\n      ...(e.target.name === \"email\"\n        ? { email: { err, msg } }\n        : { confirmEmail: { err, msg } }),\n    }));\n  };\n\n  const validatePhoneNumber = (value: string, data: any) => {\n    let msg: string = \"\",\n      err: boolean = false;\n\n    let phoneNumber = value.slice(data.dialCode.length);\n\n    if (!phoneNumber) {\n      err = false;\n      msg = \"\";\n    } else if (!isPhoneNumber(phoneNumber)) {\n      err = true;\n      msg = \"Please enter a valid phone number\";\n    } else {\n      err = false;\n    }\n\n    setSeller({\n      ...seller,\n      countryCode: \"+\" + data.dialCode,\n      phoneNumber: phoneNumber,\n    });\n  };\n\n  const onUploadAttachements = (e: SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!seller.firstName || !seller.lastName || !seller.email) {\n      snack.error(\n        \"Please fill the mandatory fields before uploading documents\"\n      );\n    }\n\n    if (!seller.documents.length) {\n      alert(\"Please select documents to upload\");\n    } else {\n      dispatch(\n        uploadDocumentsStart({\n          documents: seller.documents,\n          firstName: seller.firstName,\n          lastName: seller.lastName,\n          email: seller.email,\n        })\n      );\n    }\n  };\n\n  const HtmlTooltip = styled(({ className, ...props }: TooltipProps) => (\n    <Tooltip {...props} classes={{ popper: className }} />\n  ))(({ theme }) => ({\n    [`& .${tooltipClasses.tooltip}`]: {\n      backgroundColor: \"#f5f5f9\",\n      color: \"rgba(0, 0, 0, 0.87)\",\n      maxWidth: 220,\n      fontSize: theme.typography.pxToRem(12),\n      border: \"1px solid #dadde9\",\n    },\n  }));\n\n  const validateCountry = (val: string) => {\n    let err = false,\n      msg = \"\";\n\n    if (!val) {\n      err = true;\n      msg = \"Required\";\n    } else {\n      err = false;\n    }\n\n    setSeller({ ...seller, country: val });\n\n    setError((prevState) => ({\n      ...prevState,\n      country: {\n        err,\n        msg,\n      },\n    }));\n  };\n\n  return (\n    <div className=\"request-to-sell-wrap\">\n      {/* <section className=\"request-two-about-section\">\n        <div className=\"container\">\n          <div className=\"request-two-about-card\">\n            <div className=\"request-arrow-icon\">\n              <i className=\"fas fa-check-circle\"></i>\n            </div>\n            <h4>Lorem Ipsum is simply dummy text of the printing and typesetting</h4>\n            <p>Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries,Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries.</p>\n          </div>\n        </div>\n      </section> */}\n      <section className=\"request-form-section\">\n        <div className=\"container\">\n          <div className=\"request-form-card\">\n            <div className=\"request-arrow-icon\">\n              <i className=\"fas fa-check-circle\" />\n            </div>\n            <form>\n              <div className=\"row\">\n                <div className=\"col-md-6\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"f_name\" className=\"required-field\">\n                      First Name\n                    </label>\n                    <TextField\n                      value={seller.firstName}\n                      error={error.firstName.err}\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      name=\"firstName\"\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"firstName\"\n                      autoFocus\n                      helperText={error.firstName.msg}\n                      onChange={validateName}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"email\" className=\"required-field\">\n                      Resell Email (Provide same emailId as Resell)\n                    </label>\n                    <TextField\n                      error={error.email.err}\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      name=\"email\"\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"email\"\n                      autoFocus\n                      helperText={error.email.msg}\n                      onChange={validateEmail}\n                    />{\" \"}\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"city\">City</label>\n                    <TextField\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"city\"\n                      name=\"city\"\n                      value={seller.city}\n                      onChange={(e) =>\n                        setSeller({ ...seller, city: e.target.value })\n                      }\n                    />{\" \"}\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"job\">Job Title</label>\n                    <TextField\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"jobTitle\"\n                      name=\"Job Title\"\n                      value={seller.jobTitle}\n                      onChange={(e) =>\n                        setSeller({ ...seller, jobTitle: e.target.value })\n                      }\n                    />{\" \"}\n                  </div>\n                </div>\n\n                <div className=\"col-md-6\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"l_name\" className=\"required-field\">\n                      Last Name\n                    </label>\n                    <TextField\n                      value={seller.lastName}\n                      error={error.lastName.err}\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      name=\"lastName\"\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"lastName\"\n                      autoFocus\n                      helperText={error.lastName.msg}\n                      onChange={validateName}\n                    />{\" \"}\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"c_email\" className=\"required-field\">\n                      Confirm Email\n                    </label>\n                    <TextField\n                      error={error.confirmEmail.err}\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"email\"\n                      name=\"confirmEmail\"\n                      helperText={error.confirmEmail.msg}\n                      onChange={validateEmail}\n                    />{\" \"}\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"country\" className=\"required-field\">\n                      Country\n                    </label>\n                    <CountryDropdown\n                      id=\"country-select\"\n                      classes={`${\n                        error.country.err\n                          ? \"countryErr country-dropdown css-1t8l2tu-MuiInputBase-input-MuiOutlinedInput-input\"\n                          : \"country-dropdown css-1t8l2tu-MuiInputBase-input-MuiOutlinedInput-input\"\n                      }`}\n                      value={seller.country}\n                      labelType=\"short\"\n                      valueType=\"short\"\n                      onChange={validateCountry}\n                    />\n                    {error.country.err ? (\n                      <div>\n                        <span className={\"custom-error\"}>\n                          {error.country.msg}\n                        </span>\n                      </div>\n                    ) : null}\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </section>\n      <section className=\"request-form-section non-active\">\n        <div className=\"container\">\n          <div className=\"request-form-card\">\n            <div className=\"request-arrow-icon\"></div>\n            <form>\n              <div className=\"row\">\n                <div className=\"col-md-6\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"f_name\">\n                      What is the preferred tax classification for your company?\n                    </label>\n                    <HtmlTooltip\n                      title={\n                        <React.Fragment>\n                          <b>{\"W-9:\"}</b>{\" \"}\n                          {\n                            \"Used by U.S persons (U.S.citizens or residents and business entities organized in the United States) to provide their name name, address, federal tax classification, and U.S. taxpayer identification number.\"\n                          }\n                          <br />\n                          <b>{\"W-8 ECI:\"}</b>{\" \"}\n                          {\n                            \"Used by non-U.S. persons (foreign corporations), foreign partnerships, etc.) to claim that income is effectively connected with the conduct of a trade or business within the United States.\"\n                          }\n                        </React.Fragment>\n                      }\n                    >\n                      <InfoIcon fontSize=\"small\" />\n                    </HtmlTooltip>\n\n                    <div className=\"d-flex classification-input\">\n                      <div className=\"d-flex align-items-center\">\n                        <RadioGroup\n                          row\n                          aria-label=\"preferredTaxClassification\"\n                          name=\"row-radio-buttons-group\"\n                        >\n                          <FormControlLabel\n                            value=\"W-9\"\n                            control={\n                              <Radio\n                                checked={\n                                  seller.preferredTaxClassification === \"W-9\"\n                                }\n                                onChange={(e) => {\n                                  setSeller({\n                                    ...seller,\n                                    preferredTaxClassification: e.target.value,\n                                  });\n                                }}\n                              />\n                            }\n                            label=\"W-9\"\n                          />\n                          <FormControlLabel\n                            value=\"W-8 ECI\"\n                            control={\n                              <Radio\n                                checked={\n                                  seller.preferredTaxClassification ===\n                                  \"W-8 ECI\"\n                                }\n                                onChange={(e) => {\n                                  setSeller({\n                                    ...seller,\n                                    preferredTaxClassification: e.target.value,\n                                  });\n                                }}\n                              />\n                            }\n                            label=\"W-8 ECI\"\n                          />\n                        </RadioGroup>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"email\">Country of Incorporation</label>\n                    <HtmlTooltip\n                      title={\n                        <React.Fragment>\n                          {\n                            \"Please state the country this business was initially started.\"\n                          }\n                        </React.Fragment>\n                      }\n                    >\n                      <InfoIcon fontSize=\"small\" />\n                    </HtmlTooltip>\n                    <CountryDropdown\n                      classes=\"country-dropdown css-1t8l2tu-MuiInputBase-input-MuiOutlinedInput-input\"\n                      value={seller.countryOfIncorporation}\n                      onChange={(val: string) =>\n                        setSeller({ ...seller, countryOfIncorporation: val })\n                      }\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"city\">Legal Company Name</label>\n                    <HtmlTooltip\n                      title={\n                        <React.Fragment>\n                          {\n                            \"Name of the person or entity who owns the business. For sole proprietorship, this is usually the owner's full name. For limited partnerships, LLCs, and incorporations, this is the name used when the business is first registered.\"\n                          }\n                        </React.Fragment>\n                      }\n                    >\n                      <InfoIcon fontSize=\"small\" />\n                    </HtmlTooltip>\n\n                    <TextField\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      name=\"legalCompanyName\"\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"legalCompanyName\"\n                      value={seller.legalCompanyName}\n                      onChange={(e) =>\n                        setSeller({\n                          ...seller,\n                          legalCompanyName: e.target.value,\n                        })\n                      }\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"job\">Doing Business As (DBA)</label>\n                    <HtmlTooltip\n                      title={\n                        <React.Fragment>\n                          {\n                            \"If the company operates under a unique name different from the Legal Company Name. If you do not use a DBA please enter your Legal Company Name.\"\n                          }\n                        </React.Fragment>\n                      }\n                    >\n                      <InfoIcon fontSize=\"small\" />\n                    </HtmlTooltip>\n                    <TextField\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      name=\"doingBusinessAs\"\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"doingBusinessAs\"\n                      value={seller.doingBusinessAs}\n                      onChange={(e) =>\n                        setSeller({\n                          ...seller,\n                          doingBusinessAs: e.target.value,\n                        })\n                      }\n                    />{\" \"}\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"job\">DUNS Number</label>\n                    <HtmlTooltip\n                      title={\n                        <React.Fragment>\n                          {\n                            \"If the company operates under a unique name different from the Legal Company Name. If you do not use a DBA please enter your Legal Company Name.\"\n                          }\n                        </React.Fragment>\n                      }\n                    >\n                      <InfoIcon fontSize=\"small\" />\n                    </HtmlTooltip>\n                    <TextField\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      name=\"dunsNumber\"\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"dunsNumber\"\n                      value={seller.dunsNumber}\n                      onChange={(e) =>\n                        setSeller({ ...seller, dunsNumber: e.target.value })\n                      }\n                    />\n                  </div>\n                </div>\n\n                <div className=\"col-md-6\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"l_name\">\n                      Select your state of incorporation\n                    </label>\n                    <RegionDropdown\n                      classes=\"country-dropdown css-1t8l2tu-MuiInputBase-input-MuiOutlinedInput-input\"\n                      country={seller.countryOfIncorporation}\n                      value={seller.stateOfIncorporation}\n                      onChange={(val: string) =>\n                        setSeller({ ...seller, stateOfIncorporation: val })\n                      }\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"c_email\">\n                      Are you a Public Company listed on a Stock Exchange?\n                    </label>\n                    <div className=\"d-flex align-items-center\">\n                      <RadioGroup\n                        row\n                        aria-label=\"listedOnStockExchange\"\n                        name=\"row-radio-buttons-group\"\n                      >\n                        <FormControlLabel\n                          value=\"Yes\"\n                          control={\n                            <Radio\n                              checked={seller.listedOnStockExchange === \"Yes\"}\n                              onChange={(e) => {\n                                setSeller({\n                                  ...seller,\n                                  listedOnStockExchange: e.target.value,\n                                });\n                              }}\n                            />\n                          }\n                          label=\"Yes\"\n                        />\n                        <FormControlLabel\n                          value=\"No\"\n                          control={\n                            <Radio\n                              checked={seller.listedOnStockExchange === \"No\"}\n                              onChange={(e) => {\n                                setSeller({\n                                  ...seller,\n                                  listedOnStockExchange: e.target.value,\n                                });\n                              }}\n                            />\n                          }\n                          label=\"No\"\n                        />\n                      </RadioGroup>\n                    </div>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"country\">US Tax ID (TIN)</label>\n                    <TextField\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      name=\"tinNumber\"\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"tinNumber\"\n                      value={seller.tinNumber}\n                      onChange={(e) =>\n                        setSeller({ ...seller, tinNumber: e.target.value })\n                      }\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"country\">Year of foundation</label>\n                    <HtmlTooltip\n                      title={\n                        <React.Fragment>\n                          {\"The year this business was started.\"}\n                        </React.Fragment>\n                      }\n                    >\n                      <InfoIcon fontSize=\"small\" />\n                    </HtmlTooltip>\n                    <TextField\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      name=\"yearOfFoundation\"\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"yearOfFoundation\"\n                      value={seller.yearOfFoundation}\n                      onChange={(e) =>\n                        setSeller({\n                          ...seller,\n                          yearOfFoundation: e.target.value,\n                        })\n                      }\n                    />{\" \"}\n                  </div>\n                  <div className=\"form-group\">\n                    <label>\n                      {\" \"}\n                      <p>\n                        Please upload these official U.S. documents for\n                        application processing: <br />\n                        -U.S. W9 form\n                        <br />\n                        -U.S. EIN (Federal Tax ID)\n                      </p>\n                    </label>\n                    <div className=\"upload-btn-wrapper\">\n                      <div className=\"d-flex upload-btn-wrapper-content-wrap\">\n                        <div className=\"upload-btn-wrapper-content d-flex align-items-center\">\n                          <button className=\"btn\">\n                            <i className=\"fas fa-paperclip\"></i> Add\n                            Attachements{\" \"}\n                          </button>\n                          {seller.documents &&\n                          seller.documents.length > 0 ? null : (\n                            <p>Or drop files</p>\n                          )}\n                          <input\n                            accept=\"application/pdf\"\n                            type=\"file\"\n                            multiple\n                            name=\"myfile\"\n                            onChange={(e) => {\n                              e.preventDefault();\n                              setSeller({\n                                ...seller,\n                                documents: e.target.files,\n                              });\n                            }}\n                          />\n                          {seller.documents && seller.documents.length > 0\n                            ? Object.keys(seller.documents).map(\n                                (item: any, index: number) => (\n                                  <Chip\n                                    key={index}\n                                    // onDelete={deleteAttachements}\n                                    label={seller.documents[item].name}\n                                  />\n                                )\n                              )\n                            : null}\n                        </div>\n                      </div>\n                    </div>\n                    <button\n                      onClick={onUploadAttachements}\n                      className=\"btn btn-primary\"\n                    >\n                      Upload\n                    </button>\n                  </div>\n\n                  <p>\n                    Earlier Uploaded Files:\n                    <br /> Please choose the files then upload the documents\n                    here (maximum file size per document is 5MB). <br />\n                    Please upload the documents of proof mentioned above.\n                  </p>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </section>\n      <section className=\"request-form-section non-active\">\n        <div className=\"container\">\n          <div className=\"request-form-card\">\n            <div className=\"request-arrow-icon\"></div>\n            <form onSubmit={onSubmit}>\n              <h5>Legal Entity Address</h5>\n              <div className=\"row\">\n                <div className=\"col-md-6\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"email\">Country</label>\n                    <CountryDropdown\n                      classes=\"country-dropdown css-1t8l2tu-MuiInputBase-input-MuiOutlinedInput-input\"\n                      value={seller.legalCountry}\n                      onChange={(val: string) =>\n                        setSeller({ ...seller, legalCountry: val })\n                      }\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"city\">City</label>\n                    <TextField\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      name=\"legalcity\"\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"city\"\n                      value={seller.legalCity}\n                      onChange={(e) =>\n                        setSeller({ ...seller, legalCity: e.target.value })\n                      }\n                    />{\" \"}\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"job\">Address (Line 1)</label>\n                    <TextField\n                      value={seller.addressLine1}\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      variant=\"outlined\"\n                      fullWidth\n                      name=\"address1\"\n                      id=\"address1\"\n                      onChange={(e) =>\n                        setSeller({ ...seller, addressLine1: e.target.value })\n                      }\n                    />{\" \"}\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"\">Phone Number</label>\n                    <PhoneInput\n                      specialLabel=\"\"\n                      inputStyle={{\n                        width: \"100%\",\n                        height: \"3.8em\",\n                        border: \"1px solid #CACACA !important\",\n                      }}\n                      country={\"us\"}\n                      onChange={validatePhoneNumber}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"c_email\">\n                      Does your business have offices or warehouses outside of\n                      the US ?\n                    </label>\n                    <div className=\"d-flex align-items-center\">\n                      <RadioGroup\n                        row\n                        aria-label=\"wareHouseOutsideUS\"\n                        name=\"row-radio-buttons-group\"\n                      >\n                        <FormControlLabel\n                          value=\"Yes\"\n                          control={\n                            <Radio\n                              checked={seller.wareHouseOutsideUS === \"Yes\"}\n                              onChange={(e) => {\n                                setSeller({\n                                  ...seller,\n                                  wareHouseOutsideUS: e.target.value,\n                                });\n                              }}\n                            />\n                          }\n                          label=\"Yes\"\n                        />\n                        <FormControlLabel\n                          value=\"No\"\n                          control={\n                            <Radio\n                              checked={seller.wareHouseOutsideUS === \"No\"}\n                              onChange={(e) => {\n                                setSeller({\n                                  ...seller,\n                                  wareHouseOutsideUS: e.target.value,\n                                });\n                              }}\n                            />\n                          }\n                          label=\"No\"\n                        />\n                      </RadioGroup>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"col-md-6\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"l_name\">State</label>\n                    <RegionDropdown\n                      classes=\"country-dropdown css-1t8l2tu-MuiInputBase-input-MuiOutlinedInput-input\"\n                      country={seller.legalCountry}\n                      value={seller.legalState}\n                      onChange={(val: string) =>\n                        setSeller({ ...seller, legalState: val })\n                      }\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"c_email\">Postal Code</label>\n                    <TextField\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      variant=\"outlined\"\n                      type=\"number\"\n                      fullWidth\n                      id=\"postCode\"\n                      name=\"postCode\"\n                      value={seller.postCode}\n                      onChange={(e) =>\n                        setSeller({ ...seller, postCode: e.target.value })\n                      }\n                    />{\" \"}\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"job\">Address (Line 2)</label>\n                    <TextField\n                      value={seller.addressLine2}\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      variant=\"outlined\"\n                      fullWidth\n                      name=\"address2\"\n                      id=\"address2\"\n                      onChange={(e) =>\n                        setSeller({ ...seller, addressLine2: e.target.value })\n                      }\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"country\">Company Website</label>\n                    <TextField\n                      value={seller.companyWebsiteUrl}\n                      className={\"mui-text-field\"}\n                      color=\"primary\"\n                      variant=\"outlined\"\n                      fullWidth\n                      name=\"companyWebsiteUrl\"\n                      id=\"companyWebsiteUrl\"\n                      onChange={(e) =>\n                        setSeller({\n                          ...seller,\n                          companyWebsiteUrl: e.target.value,\n                        })\n                      }\n                    />{\" \"}\n                  </div>\n                </div>\n              </div>\n              <div className=\"request-btn-wrap\">\n                <div className=\"btn-container\">\n                  <button\n                    onClick={() => {\n                      window.scrollTo(0, 0);\n                      navigate(\"/seller/onboarding/application-start\");\n                      setActiveStep(0);\n                    }}\n                    className=\"btn btn-primary\"\n                  >\n                    Back\n                  </button>\n                  <button className=\"btn btn-primary\" id=\"step_three\">\n                    Next\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/DirectSellers/onBoarding/applicationStart.tsx",["390"],"import docImg from 'assets/images/doc-img.svg';\nimport { useEffect } from 'react';\n\nimport { useNavigate } from \"react-router-dom\"\n\nexport default function ApplicationStart(props: any) {\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"request-to-sell-wrap\">\n      {/* <section className=\"application-section\">\n        <div className=\"container\">\n          <h4>Lorem Ipsum is simply dummy text of the printing and typesetting</h4>\n          <p>Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries,Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries.</p>\n        </div>\n      </section> */}\n      {/* <section className=\"tips-section\">\n        <div className=\"container\">\n          <h4>Lorem Ipsum is simply dummy text of the printing and typesetting</h4>\n          <div className=\"row\">\n            <div className=\"col-md-4\">\n              <div className=\"tips-card\">\n                <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. </p>\n              </div>\n            </div>\n            <div className=\"col-md-4\">\n              <div className=\"tips-card\">\n                <p>Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make. </p>\n              </div>\n            </div>\n            <div className=\"col-md-4\">\n              <div className=\"tips-card\">\n                <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section> */}\n      <section className=\"required-section\">\n        <h4>Please have this required information available when completing the application:</h4>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-3\">\n              <img alt='Document' src={docImg} className=\"doc-img\" />\n            </div>\n            <div className=\"col-md-9\">\n              <ul>\n                <li>US Business Tax ID (SSN not accepted)</li>\n                <li>W9 or W8 and EIN Verification Letter from the Department of Treasury that verifies your US business address or place of physical operations</li>\n                <li>Address or place of physical operations</li>\n                <li>US Business address</li>\n                <li>Planned integration method for your product catalog (bulk upload, API, solution provider)</li>\n                <li>Primary product categories, catalog size and related information (e.g. total SKUs you will be selling on resell.ooo initially with verified UPC information, and used vs. refurbished etc.)</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </section>\n      <div className=\"request-btn-wrap\">\n        <button onClick={() => {\n          props.setActiveStep(1);\n          navigate('/seller/onboarding/company-registration')\n        }}\n          className=\"btn-primary start\"\n          id=\"step_two\">START</button>\n      </div>\n    </div>\n\n  )\n}\n","/Users/pulkit/Desktop/resell-marketplace-main/src/utils/data/templateData/qtyPrice.tsx",[],"/Users/pulkit/Desktop/resell-marketplace-main/src/utils/data/templateData/data.tsx",["391"],"const data = {\n  product: [\n    \"Product Id\",\n    \"Category Name\",\n    \"Title\",\n    \"Description\",\n    \"Brand\",\n    \"CollegeName\",\n    \"Condition\",\n    \"Sale Price\",\n    \"Shipping Cost Standard\",\n    \"Shipping Cost Expedited\",\n    \"Shipping Length\",\n    \"Shipping Width\",\n    \"Shipping Height\",\n    \"Shipping Weight\",\n    \"Product Group Image URL 1\",\n    \"Product Group Image URL 2\",\n    \"Product Group Image URL 3\",\n    \"Product Group Image URL 4\",\n    \"Video URL 1\",\n    \"Video URL 2\",\n    \"Video URL 3\",\n    \"Video URL 4\",\n    \"Material\",\n    \"Length Unit\",\n    \"Width Unit\",\n    \"Price\",\n    \"Color\",\n    \"Size\",\n    \"Quantity\",\n    \"Listing Status\"],\n  Instructions: [\n    {\n      FieldDisplayName: \"Product Id\",\n      DataType: \"String\",\n      Importance: \"Optional\",\n      AllowedValues: null,\n      Description: \"A unique ID associated to a product.\",\n    },\n    {\n      FieldDisplayName: \"Category\",\n      DataType: \"String\",\n      Importance: \"Required\",\n      AllowedValues: null,\n      Description:\n        \"Indicates the category of the product being submitted. Paysfer taxonomy is made up mostly of Google's (US) taxonomy structure, with added Resell-specific categories. If you already have Google categories for your products, we recommend to use those to make mapping the categories easier.\",\n    },\n\n    {\n      FieldDisplayName: \"Title\",\n      DataType: \"String\",\n      Importance: \"Required\",\n      AllowedValues: null,\n      Description:\n        \"Title of the product for listed items. Minimum characters required: 3. Maximum 50 characters permitted.\",\n    },\n    {\n      FieldDisplayName: \"Description\",\n      DataType: \"String\",\n      Importance: \"Required\",\n      AllowedValues: null,\n      Description:\n        \"Long description of the product. Minimum 50 characters needed and maximum 250 characters permitted.\",\n    },\n\n\n    {\n      FieldDisplayName: \"Sale Price\",\n      DataType: \"Numeric\",\n      Importance: \"Optional\",\n      AllowedValues: null,\n      Description:\n        \"The price of the product when it is on sale or when a discount is provided. Must be the same or less than price.\",\n    },\n    {\n      FieldDisplayName: \"Shipping Cost Standard\",\n      DataType: \"String\",\n      Importance: \"Recommended\",\n      AllowedValues: null,\n      Description: \"The cost for shipping this product via standard shipping.\",\n    },\n    {\n      FieldDisplayName: \"Shipping Cost Expedited\",\n      DataType: \"String\",\n      Importance: \"Recommended\",\n      AllowedValues: null,\n      Description: \"The cost for shipping this product via expedited shipping.\",\n    },\n    {\n      FieldDisplayName: \"Shipping Length\",\n      DataType: \"Numeric\",\n      Importance: \"Recommended\",\n      AllowedValues: null,\n      Description: \"Length dimension of the shipped package.\",\n    },\n    {\n      FieldDisplayName: \"Shipping Width\",\n      DataType: \"Numeric\",\n      Importance: \"Recommended\",\n      AllowedValues: null,\n      Description: \"Width dimension of the shipped package.\",\n    },\n    {\n      FieldDisplayName: \"Shipping Height\",\n      DataType: \"Numeric\",\n      Importance: \"Recommended\",\n      AllowedValues: null,\n      Description: \"Height dimension of the shipped package.\",\n    },\n    {\n      FieldDisplayName: \"Shipping Weight\",\n      DataType: \"Numeric\",\n      Importance: \"Recommended\",\n      AllowedValues: null,\n      Description: \"The shipping weight of the product/package.\",\n    },\n    {\n      FieldDisplayName: \"Price\",\n      DataType: \"Numeric\",\n      Importance: \"Required\",\n      AllowedValues: null,\n      Description: \"The price to list for the product.\",\n    },\n    {\n      FieldDisplayName: \"Quantity\",\n      DataType: \"Numeric\",\n      Importance: \"Required\",\n      AllowedValues: null,\n      Description: \"The available quantity of the product\",\n    },\n    {\n      FieldDisplayName: \"Listing Status\",\n      DataType: \"String\",\n      Importance: \"Required\",\n      AllowedValues: null,\n      Description: \"Write 'live' if quantity is not 0 else write 'not live'\",\n    },\n    {\n      FieldDisplayName: \"Size\",\n      DataType: \"String\",\n      Importance: \"Optional\",\n      AllowedValues:\n        \"0 | 1 | 10 | 10.5 | 11 | 11.5 | 12 | 14 | 16 | 18 | 2 | 20 | 24 | 28 | 3 | 30 | 32 | 34 | 36 | 38 | 4 | 40 | 42 | 44 | 46 | 48 | 5 | 5.5 | 6 | 6.5 | 7 | 7.5 | 8 | 8.5 | 9 | 9.5 | extralarge | l | large | m | medium | one-size | s | small | xl | xxl | xxxl\",\n      Description: \"The size of the product.\",\n    },\n\n    {\n      FieldDisplayName: \"Image URL 1\",\n      DataType: \"URL string\",\n      Importance: \"Required\",\n      AllowedValues: null,\n      Description:\n        \"A good quality picture of the product atleast 1000 px square with at least 72 dpi. Only PNG and JPEG formats accepted.\",\n    },\n    {\n      FieldDisplayName: \"Image URL 2\",\n      DataType: \"URL string\",\n      Importance: \"Optional\",\n      AllowedValues: null,\n      Description:\n        \"A different good quality picture of the product at least 1000 px square with at least 72 dpi. Only PNG and JPEG formats accepted.\",\n    },\n    {\n      FieldDisplayName: \"Image URL 3\",\n      DataType: \"URL string\",\n      Importance: \"Optional\",\n      AllowedValues: null,\n      Description:\n        \"A different good quality picture of the product at least 1000 px square with at least 72 dpi. Only PNG and JPEG formats accepted.\",\n    },\n    {\n      FieldDisplayName: \"Image URL 4\",\n      DataType: \"URL string\",\n      Importance: \"Optional\",\n      AllowedValues: null,\n      Description:\n        \"A different good quality picture of the product at least 1000 px square with at least 72 dpi. Only PNG and JPEG formats accepted.\",\n    },\n    {\n      FieldDisplayName: \"Video URL 1\",\n      DataType: \"URL string\",\n      Importance: \"Optional\",\n      AllowedValues: null,\n      Description: \"Video URL\",\n    },\n    {\n      FieldDisplayName: \"Video URL 2\",\n      DataType: \"URL string\",\n      Importance: \"Optional\",\n      AllowedValues: null,\n      Description: \"Video URL\",\n    },\n    {\n      FieldDisplayName: \"Video URL 3\",\n      DataType: \"URL string\",\n      Importance: \"Optional\",\n      AllowedValues: null,\n      Description: \"Video URL\",\n    },\n    {\n      FieldDisplayName: \"Video URL 4\",\n      DataType: \"URL string\",\n      Importance: \"Optional\",\n      AllowedValues: null,\n      Description: \"Video URL\",\n    },\n    {\n      FieldDisplayName: \"Brand\",\n      DataType: \"String\",\n      Importance: \"Recommended\",\n      AllowedValues: null,\n      Description:\n        \"Indicates the brand of the product being submitted. Minimum of 3 characters, and maximum of 50 characters permitted.\",\n    },\n\n    {\n      FieldDisplayName: \"Condition\",\n      DataType: \"String\",\n      Importance: \"Optional\",\n      AllowedValues: \"New | Refurbished | Used\",\n      Description: \"The condition of the product at the time of sale.\",\n    },\n    {\n      FieldDisplayName: \"Color\",\n      DataType: \"String\",\n      Importance: \"Optional\",\n      AllowedValues:\n        \"beige | black | blue | brown | gold | green | grey | maroon | navy-blue | orange | pink | purple | red | rosegold | silver | tan | violet | white | yellow\",\n      Description:\n        \"The color of the product atleast 1000 px square with at least 72 dpi. Only PNG and JPEG formats accepted.\",\n    },\n    {\n      FieldDisplayName: \"Material\",\n      DataType: \"String\",\n      Importance: \"Optional\",\n      AllowedValues: null,\n      Description:\n        \"The material of the product. Can be made of multiple materials.\",\n    },\n\n    {\n      FieldDisplayName: \"Length\",\n      DataType: \"Numeric\",\n      Importance: \"Recommended\",\n      AllowedValues: null,\n      Description: \"Length dimension of the shipped package.\",\n    },\n\n    {\n      FieldDisplayName: \"Length Unit\",\n      DataType: \"String\",\n      Importance: \"Optional\",\n      AllowedValues: \"cm | ft | in | km | m | mi | mm | yd\",\n      Description: \"Unit of measure for Length (default: cm).\",\n    },\n    {\n      FieldDisplayName: \"Width Unit\",\n      DataType: \"String\",\n      Importance: \"Optional\",\n      AllowedValues: \"cm | ft | in | km | m | mi | mm | yd\",\n      Description: \"Unit of measure for Width (default: cm).\",\n    },\n  ],\n  Example: [\n    {\n      \"Product Id\": \"product_id1\",\n      \"Category Name\": \"Sunglasses\",\n      Title: \"title1\",\n      Description: \"description1\",\n      \"Sale Price\": \"500\",\n      \"Shipping Cost Standard\": \"30\",\n      \"Shipping Cost Expedited\": \"30\",\n      \"Shipping Length\": \"23\",\n      \"Shipping Width\": \"34\",\n      \"Shipping Height\": \"23\",\n      \"Shipping Weight\": \"56\",\n      Price: \"89\",\n      Quantity: \"900\",\n      \"Product Group Image URL 1\": \"URL1\",\n      \"Product Group Image URL 2\": \"URL2\",\n      \"Product Group Image URL 3\": \"URL3\",\n      \"Product Group Image URL 4\": \"URL4\",\n      \"Video URL 1\": \"Video URL 1\",\n      \"Video URL 2\": \"Video URL 2\",\n      \"Video URL 3\": \"Video URL 3\",\n      \"Video URL 4\": \"Video URL 4\",\n      Brand: \"brand\",\n      \"Country Of Origin\": \"US\",\n      Condition: \"New\",\n      Color: \"Red\",\n      Material: \"Cotton\",\n      Gender: \"Male\",\n      \"Length Unit\": \"in\",\n      \"Width Unit\": \"in\",\n    },\n    {\n      \"Product Id\": \"product_id2\",\n      \"Category Name\": \"Sunglasses\",\n      Title: \"title1\",\n      Description: \"description1\",\n      \"Sale Price\": \"500\",\n      \"Shipping Cost Standard\": \"30\",\n      \"Shipping Cost Expedited\": \"30\",\n      \"Shipping Length\": \"23\",\n      \"Shipping Width\": \"34\",\n      \"Shipping Height\": \"23\",\n      \"Shipping Weight\": \"56\",\n      Price: \"89\",\n      Quantity: \"900\",\n      \"Product Group Image URL 1\": \"URL1\",\n      \"Product Group Image URL 2\": \"URL2\",\n      \"Product Group Image URL 3\": \"URL3\",\n      \"Product Group Image URL 4\": \"URL4\",\n      \"Video URL 1\": \"Video URL 1\",\n      \"Video URL 2\": \"Video URL 2\",\n      \"Video URL 3\": \"Video URL 3\",\n      \"Video URL 4\": \"Video URL 4\",\n      Brand: \"brand\",\n      Condition: \"New\",\n      Color: \"Red\",\n      Material: \"Cotton\",\n      \"Length Unit\": \"in\",\n      \"Width Unit\": \"in\",\n    },\n    {\n      \"Product Id\": \"product_id3\",\n      \"Category Name\": \"Sunglasses\",\n      Title: \"title1\",\n      Description: \"description1\",\n      \"Sale Price\": \"500\",\n      \"Shipping Cost Standard\": \"30\",\n      \"Shipping Cost Expedited\": \"30\",\n      \"Shipping Length\": \"23\",\n      \"Shipping Width\": \"34\",\n      \"Shipping Height\": \"23\",\n      \"Shipping Weight\": \"56\",\n      Price: \"89\",\n      Quantity: \"900\",\n      \"Product Group Image URL 1\": \"URL1\",\n      \"Product Group Image URL 2\": \"URL2\",\n      \"Product Group Image URL 3\": \"URL3\",\n      \"Product Group Image URL 4\": \"URL4\",\n      \"Video URL 1\": \"Video URL 1\",\n      \"Video URL 2\": \"Video URL 2\",\n      \"Video URL 3\": \"Video URL 3\",\n      \"Video URL 4\": \"Video URL 4\",\n      Brand: \"brand\",\n      Condition: \"New\",\n      Color: \"Red\",\n      Material: \"Cotton\",\n      \"Length Unit\": \"in\",\n      \"Width Unit\": \"in\",\n    },,\n    {\n      \"Product Id\": \"product_id4\",\n      \"Category Name\": \"Sunglasses\",\n      Title: \"title2\",\n      Description: \"description2\",\n      \"Sale Price\": \"500\",\n      \"Shipping Cost Standard\": \"30\",\n      \"Shipping Cost Expedited\": \"30\",\n      \"Shipping Length\": \"23\",\n      \"Shipping Width\": \"34\",\n      \"Shipping Height\": \"23\",\n      \"Shipping Weight\": \"56\",\n      Price: \"89\",\n      Quantity: \"900\",\n      \"Product Group Image URL 1\": \"URL1\",\n      \"Product Group Image URL 2\": \"URL2\",\n      \"Product Group Image URL 3\": \"URL3\",\n      \"Product Group Image URL 4\": \"URL4\",\n      \"Video URL 1\": \"Video URL 1\",\n      \"Video URL 2\": \"Video URL 2\",\n      \"Video URL 3\": \"Video URL 3\",\n      \"Video URL 4\": \"Video URL 4\",\n      Brand: \"brand\",\n      Condition: \"New\",\n      Color: \"Red\",\n      Material: \"Cotton\",\n      \"Length Unit\": \"in\",\n      \"Width Unit\": \"in\",\n    },\n    {\n      \"Product Id\": \"product_id5\",\n      \"Category Name\": \"Sunglasses\",\n      Title: \"title3\",\n      Description: \"description3\",\n      \"Sale Price\": \"500\",\n      \"Shipping Cost Standard\": \"30\",\n      \"Shipping Cost Expedited\": \"30\",\n      \"Shipping Length\": \"23\",\n      \"Shipping Width\": \"34\",\n      \"Shipping Height\": \"23\",\n      \"Shipping Weight\": \"56\",\n      Price: \"89\",\n      Quantity: \"900\",\n      \"Product Group Image URL 1\": \"URL1\",\n      \"Product Group Image URL 2\": \"URL2\",\n      \"Product Group Image URL 3\": \"URL3\",\n      \"Product Group Image URL 4\": \"URL4\",\n      \"Video URL 1\": \"Video URL 1\",\n      \"Video URL 2\": \"Video URL 2\",\n      \"Video URL 3\": \"Video URL 3\",\n      \"Video URL 4\": \"Video URL 4\",\n      Brand: \"brand\",\n      Condition: \"New\",\n      Color: \"Red\",\n      Material: \"Cotton\",\n      \"Length Unit\": \"in\",\n      \"Width Unit\": \"in\",\n    },\n  ],\n};\n\nexport default data;\n","/Users/pulkit/Desktop/resell-marketplace-main/src/components/Content/DirectSellers/onBoarding/editableTable.tsx",["392"],"import React, { SyntheticEvent, useEffect, useState } from \"react\";\nimport { Create, DeleteOutline, AddBox, Done, Clear } from '@mui/icons-material';\nimport {\n  Box, Button, Table,\n  TableBody, TableCell, TableHead, TableRow, TextField\n} from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    \"& > *\": {\n      borderBottom: \"unset\",\n    },\n  },\n  table: {\n    minWidth: 650,\n  },\n  snackbar: {\n    bottom: \"104px\",\n  },\n});\n\nfunction EditableTable(props: any) {\n  const { seller, setSeller } = props;\n  const classes = useStyles();\n  const [isEdit, setEdit] = React.useState(true);\n  const [disable, setDisable] = React.useState(true);\n\n  const [rows, setRows] = useState([{ id: 1, marketplaceName: \"\", sellerName: \"\", url: \"\" }]);\n\n  useEffect (() => {\n    let _seller = seller.marketPlace;\n    if (_seller && Object.entries(_seller).length) {\n      setRows(Array(_seller));\n    }\n  }, []);\n\n  const handleAdd = () => {\n    setRows([\n      ...rows,\n      {\n        id: rows.length + 1, marketplaceName: \"\",\n        sellerName: \"\", url: \"\"\n      },\n    ]);\n    \n    setEdit(true);\n  };\n\n  const handleEdit = (i: any) => setEdit(!isEdit);\n\n  const handleSave = () => {\n    setEdit(!isEdit);\n    setRows(rows);\n    setDisable(true);\n    setSeller({ ...seller, marketPlace: [ ...rows ] })\n  };\n\n  const handleInputChange = (e: SyntheticEvent, index: number) => {\n    setDisable(false);\n    const { name, value }: any = e.target;\n    const list: any = [...rows.flat(1)];\n    list[index][name] = value;\n    setRows(list);\n    setSeller({ ...seller, marketPlace: [ ...list ] })\n  };\n\n  const handleRemoveClick = (i: any) => {\n    const list = [...rows.flat(1)];\n    list.splice(i, 1);\n    setRows(list);\n    setSeller({ ...seller, marketPlace: [ ...list ] })\n  };\n\n  return (\n    <TableBody>\n      <Box margin={1}>\n        <div>\n          <div>\n            {isEdit ? (\n              <div className=\"row\">\n                <Button onClick={handleAdd}>\n                  <AddBox onClick={handleAdd} />\n                  Add More Information\n                </Button>\n                {rows.length !== 0 && (\n                  <div>\n                    {disable ? (\n                      <Button disabled onClick={handleSave}>\n                        <Done />\n                        SAVE\n                      </Button>\n                    ) : (\n                      <Button onClick={handleSave}>\n                        <Done />\n                        SAVE\n                      </Button>\n                    )}\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div>\n                <Button onClick={handleAdd}>\n                  <AddBox onClick={handleAdd} />\n                  ADD\n                </Button>\n                <Button onClick={handleEdit}>\n                  <Create />\n                  EDIT\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <Table\n          className={classes.table}\n          size=\"small\"\n          aria-label=\"a dense table\"\n        >\n          <TableHead>\n            <TableRow>\n              <TableCell>Market Place Name</TableCell>\n              <TableCell>Market Seller Name</TableCell>\n              <TableCell>Website URL</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.flat(1).map((row, i) => {\n              return (\n                <TableRow>\n                  {isEdit ? (\n                    <>\n                      <TableCell padding=\"none\">\n                        <TextField\n                          className={'mui-text-field'}\n                          value={row.marketplaceName}\n                          name=\"marketplaceName\"\n                          onChange={(e) => handleInputChange(e, i)}\n                        />\n                      </TableCell>\n                      <TableCell padding=\"none\">\n                        <TextField\n                          className={'mui-text-field'}\n                          value={row.sellerName}\n                          name=\"sellerName\"\n                          onChange={(e) => handleInputChange(e, i)}\n                        />\n                      </TableCell>\n                      <TableCell padding=\"none\">\n                        <TextField\n                          className={'mui-text-field'}\n                          style={{ width: \"100px\" }}\n                          name=\"url\"\n                          value={row.url}\n                          onChange={(e) => handleInputChange(e, i)}\n                        />\n                      </TableCell>\n                    </>\n                  ) : (\n                    <>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {row.marketplaceName}\n                      </TableCell>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {row.sellerName}\n                      </TableCell>\n                      <TableCell component=\"th\" scope=\"row\" align=\"center\">\n                        {row.url}\n                      </TableCell>\n                      <TableCell\n                        component=\"th\"\n                        scope=\"row\"\n                        align=\"center\"\n                      ></TableCell>\n                    </>\n                  )}\n                  <>\n                    {isEdit ? (\n                      <Button className=\"mr10\" onClick={() => handleRemoveClick(i)}>\n                        <Clear />\n                      </Button>\n                    ) : (\n                      <Button className=\"mr10\" onClick={() => handleRemoveClick(i)}>\n                        <DeleteOutline />\n                      </Button>\n                    )}\n                  </>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </Box>\n    </TableBody>\n  );\n}\n\nexport default EditableTable;\n",{"ruleId":"393","severity":1,"message":"394","line":4,"column":8,"nodeType":"395","messageId":"396","endLine":4,"endColumn":15},{"ruleId":"393","severity":1,"message":"397","line":5,"column":17,"nodeType":"395","messageId":"396","endLine":5,"endColumn":25},{"ruleId":"393","severity":1,"message":"398","line":23,"column":8,"nodeType":"395","messageId":"396","endLine":23,"endColumn":13},{"ruleId":"393","severity":1,"message":"399","line":29,"column":10,"nodeType":"395","messageId":"396","endLine":29,"endColumn":24},{"ruleId":"393","severity":1,"message":"400","line":29,"column":26,"nodeType":"395","messageId":"396","endLine":29,"endColumn":43},{"ruleId":"401","severity":1,"message":"402","line":45,"column":6,"nodeType":"403","endLine":45,"endColumn":8,"suggestions":"404"},{"ruleId":"405","severity":1,"message":"406","line":55,"column":45,"nodeType":"407","messageId":"408","endLine":55,"endColumn":47},{"ruleId":"405","severity":1,"message":"406","line":174,"column":49,"nodeType":"407","messageId":"408","endLine":174,"endColumn":51},{"ruleId":"409","severity":1,"message":"410","line":12,"column":23,"nodeType":"411","messageId":"412","endLine":12,"endColumn":24,"fix":"413"},{"ruleId":"393","severity":1,"message":"414","line":126,"column":19,"nodeType":"395","messageId":"396","endLine":126,"endColumn":22},{"ruleId":"393","severity":1,"message":"414","line":176,"column":21,"nodeType":"395","messageId":"396","endLine":176,"endColumn":24},{"ruleId":"415","severity":1,"message":"416","line":221,"column":9,"nodeType":"417","messageId":"418","endLine":226,"endColumn":10},{"ruleId":"415","severity":1,"message":"416","line":231,"column":9,"nodeType":"417","messageId":"418","endLine":240,"endColumn":10},{"ruleId":"415","severity":1,"message":"416","line":274,"column":11,"nodeType":"417","messageId":"418","endLine":279,"endColumn":12},{"ruleId":"415","severity":1,"message":"416","line":284,"column":11,"nodeType":"417","messageId":"418","endLine":287,"endColumn":12},{"ruleId":"415","severity":1,"message":"416","line":292,"column":11,"nodeType":"417","messageId":"418","endLine":295,"endColumn":12},{"ruleId":"415","severity":1,"message":"416","line":300,"column":11,"nodeType":"417","messageId":"418","endLine":302,"endColumn":12},{"ruleId":"393","severity":1,"message":"419","line":61,"column":17,"nodeType":"395","messageId":"396","endLine":61,"endColumn":30},{"ruleId":"415","severity":1,"message":"416","line":80,"column":9,"nodeType":"417","messageId":"418","endLine":87,"endColumn":10},{"ruleId":"393","severity":1,"message":"420","line":29,"column":16,"nodeType":"395","messageId":"396","endLine":29,"endColumn":31},{"ruleId":"393","severity":1,"message":"421","line":3,"column":10,"nodeType":"395","messageId":"396","endLine":3,"endColumn":24},{"ruleId":"422","severity":1,"message":"423","line":20,"column":49,"nodeType":"424","messageId":"425","endLine":20,"endColumn":50,"suggestions":"426"},{"ruleId":"393","severity":1,"message":"427","line":14,"column":10,"nodeType":"395","messageId":"396","endLine":14,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":28,"column":6,"nodeType":"403","endLine":28,"endColumn":27,"suggestions":"428"},{"ruleId":"393","severity":1,"message":"429","line":9,"column":15,"nodeType":"395","messageId":"396","endLine":9,"endColumn":21},{"ruleId":"393","severity":1,"message":"430","line":10,"column":22,"nodeType":"395","messageId":"396","endLine":10,"endColumn":35},{"ruleId":"401","severity":1,"message":"431","line":58,"column":5,"nodeType":"403","endLine":58,"endColumn":19,"suggestions":"432"},{"ruleId":"393","severity":1,"message":"433","line":12,"column":23,"nodeType":"395","messageId":"396","endLine":12,"endColumn":34},{"ruleId":"393","severity":1,"message":"434","line":14,"column":10,"nodeType":"395","messageId":"396","endLine":14,"endColumn":27},{"ruleId":"393","severity":1,"message":"435","line":3,"column":3,"nodeType":"395","messageId":"396","endLine":3,"endColumn":19},{"ruleId":"393","severity":1,"message":"436","line":23,"column":10,"nodeType":"395","messageId":"396","endLine":23,"endColumn":23},{"ruleId":"393","severity":1,"message":"437","line":32,"column":10,"nodeType":"395","messageId":"396","endLine":32,"endColumn":14},{"ruleId":"393","severity":1,"message":"438","line":32,"column":16,"nodeType":"395","messageId":"396","endLine":32,"endColumn":23},{"ruleId":"393","severity":1,"message":"439","line":1,"column":10,"nodeType":"395","messageId":"396","endLine":1,"endColumn":22},{"ruleId":"393","severity":1,"message":"440","line":2,"column":10,"nodeType":"395","messageId":"396","endLine":2,"endColumn":19},{"ruleId":"393","severity":1,"message":"441","line":22,"column":10,"nodeType":"395","messageId":"396","endLine":22,"endColumn":22},{"ruleId":"393","severity":1,"message":"442","line":23,"column":10,"nodeType":"395","messageId":"396","endLine":23,"endColumn":22},{"ruleId":"393","severity":1,"message":"443","line":24,"column":10,"nodeType":"395","messageId":"396","endLine":24,"endColumn":23},{"ruleId":"393","severity":1,"message":"444","line":24,"column":25,"nodeType":"395","messageId":"396","endLine":24,"endColumn":41},{"ruleId":"393","severity":1,"message":"445","line":25,"column":10,"nodeType":"395","messageId":"396","endLine":25,"endColumn":22},{"ruleId":"393","severity":1,"message":"446","line":25,"column":24,"nodeType":"395","messageId":"396","endLine":25,"endColumn":39},{"ruleId":"393","severity":1,"message":"437","line":26,"column":10,"nodeType":"395","messageId":"396","endLine":26,"endColumn":14},{"ruleId":"393","severity":1,"message":"438","line":26,"column":16,"nodeType":"395","messageId":"396","endLine":26,"endColumn":23},{"ruleId":"393","severity":1,"message":"447","line":3,"column":8,"nodeType":"395","messageId":"396","endLine":3,"endColumn":20},{"ruleId":"401","severity":1,"message":"448","line":29,"column":6,"nodeType":"403","endLine":29,"endColumn":32,"suggestions":"449"},{"ruleId":"393","severity":1,"message":"450","line":87,"column":11,"nodeType":"395","messageId":"396","endLine":87,"endColumn":21},{"ruleId":"451","severity":1,"message":"452","line":176,"column":23,"nodeType":"453","endLine":176,"endColumn":47},{"ruleId":"393","severity":1,"message":"454","line":13,"column":7,"nodeType":"395","messageId":"396","endLine":13,"endColumn":11},{"ruleId":"393","severity":1,"message":"455","line":4,"column":10,"nodeType":"395","messageId":"396","endLine":4,"endColumn":25},{"ruleId":"456","severity":1,"message":"457","line":29,"column":37,"nodeType":"458","messageId":"459","endLine":29,"endColumn":39},{"ruleId":"393","severity":1,"message":"460","line":84,"column":9,"nodeType":"395","messageId":"396","endLine":84,"endColumn":17},{"ruleId":"393","severity":1,"message":"461","line":102,"column":13,"nodeType":"395","messageId":"396","endLine":102,"endColumn":21},{"ruleId":"393","severity":1,"message":"398","line":4,"column":8,"nodeType":"395","messageId":"396","endLine":4,"endColumn":13},{"ruleId":"393","severity":1,"message":"462","line":4,"column":27,"nodeType":"395","messageId":"396","endLine":4,"endColumn":39},{"ruleId":"393","severity":1,"message":"398","line":5,"column":8,"nodeType":"395","messageId":"396","endLine":5,"endColumn":13},{"ruleId":"393","severity":1,"message":"463","line":6,"column":13,"nodeType":"395","messageId":"396","endLine":6,"endColumn":17},{"ruleId":"393","severity":1,"message":"464","line":12,"column":9,"nodeType":"395","messageId":"396","endLine":12,"endColumn":15},{"ruleId":"393","severity":1,"message":"465","line":1,"column":17,"nodeType":"395","messageId":"396","endLine":1,"endColumn":31},{"ruleId":"393","severity":1,"message":"397","line":1,"column":33,"nodeType":"395","messageId":"396","endLine":1,"endColumn":41},{"ruleId":"393","severity":1,"message":"440","line":5,"column":3,"nodeType":"395","messageId":"396","endLine":5,"endColumn":12},{"ruleId":"393","severity":1,"message":"466","line":6,"column":3,"nodeType":"395","messageId":"396","endLine":6,"endColumn":16},{"ruleId":"393","severity":1,"message":"467","line":7,"column":3,"nodeType":"395","messageId":"396","endLine":7,"endColumn":17},{"ruleId":"393","severity":1,"message":"468","line":8,"column":3,"nodeType":"395","messageId":"396","endLine":8,"endColumn":13},{"ruleId":"393","severity":1,"message":"469","line":9,"column":3,"nodeType":"395","messageId":"396","endLine":9,"endColumn":7},{"ruleId":"393","severity":1,"message":"470","line":14,"column":10,"nodeType":"395","messageId":"396","endLine":14,"endColumn":19},{"ruleId":"393","severity":1,"message":"471","line":16,"column":10,"nodeType":"395","messageId":"396","endLine":16,"endColumn":21},{"ruleId":"393","severity":1,"message":"469","line":4,"column":3,"nodeType":"395","messageId":"396","endLine":4,"endColumn":7},{"ruleId":"393","severity":1,"message":"472","line":9,"column":3,"nodeType":"395","messageId":"396","endLine":9,"endColumn":8},{"ruleId":"393","severity":1,"message":"473","line":10,"column":3,"nodeType":"395","messageId":"396","endLine":10,"endColumn":6},{"ruleId":"393","severity":1,"message":"474","line":11,"column":3,"nodeType":"395","messageId":"396","endLine":11,"endColumn":7},{"ruleId":"393","severity":1,"message":"475","line":18,"column":10,"nodeType":"395","messageId":"396","endLine":18,"endColumn":14},{"ruleId":"393","severity":1,"message":"476","line":18,"column":16,"nodeType":"395","messageId":"396","endLine":18,"endColumn":23},{"ruleId":"393","severity":1,"message":"477","line":21,"column":9,"nodeType":"395","messageId":"396","endLine":21,"endColumn":14},{"ruleId":"393","severity":1,"message":"478","line":151,"column":9,"nodeType":"395","messageId":"396","endLine":151,"endColumn":33},{"ruleId":"393","severity":1,"message":"479","line":207,"column":7,"nodeType":"395","messageId":"396","endLine":207,"endColumn":10},{"ruleId":"393","severity":1,"message":"480","line":209,"column":7,"nodeType":"395","messageId":"396","endLine":209,"endColumn":10},{"ruleId":"393","severity":1,"message":"470","line":2,"column":10,"nodeType":"395","messageId":"396","endLine":2,"endColumn":19},{"ruleId":"481","severity":1,"message":"482","line":265,"column":12,"nodeType":"403","messageId":"483","endLine":413,"endColumn":4},{"ruleId":"401","severity":1,"message":"484","line":36,"column":6,"nodeType":"403","endLine":36,"endColumn":8,"suggestions":"485"},"@typescript-eslint/no-unused-vars","'Content' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'snack' is defined but never used.","'getSellerStart' is defined but never used.","'sellerLogoutStart' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["486"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"487","text":"488"},"'res' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'response' is assigned a value but never used.","'processProducts' is defined but never used.","'getAccessToken' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["489","490"],"'Pagination' is defined but never used.",["491"],"'setMsg' is assigned a value but never used.","'setStatusCode' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'seller' and 'sellerData.email'. Either include them or remove the dependency array. You can also do a functional update 'setSeller(s => ...)' if you only need 'seller' in the 'setSeller' call.",["492"],"'useLocation' is defined but never used.","'sellerSigninStart' is defined but never used.","'CircularProgress' is defined but never used.","'taxCodesStart' is defined but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'Autocomplete' is defined but never used.","'TextField' is defined but never used.","'categoryList' is assigned a value but never used.","'taxCodesList' is assigned a value but never used.","'categoryValue' is assigned a value but never used.","'setCategoryValue' is assigned a value but never used.","'taxCodeValue' is assigned a value but never used.","'setTaxCodeValue' is assigned a value but never used.","'orderDetails' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'pageLimit'. Either include them or remove the dependency array.",["493"],"'payoutTime' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'bull' is assigned a value but never used.","'bulkUploadStart' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'readFile' is assigned a value but never used.","'products' is assigned a value but never used.","'startLoading' is defined but never used.","'XLSX' is defined but never used.","'seller' is assigned a value but never used.","'SyntheticEvent' is defined but never used.","'OutlinedInput' is defined but never used.","'InputAdornment' is defined but never used.","'IconButton' is defined but never used.","'Link' is defined but never used.","'useEffect' is defined but never used.","'useNavigate' is defined but never used.","'Modal' is defined but never used.","'Box' is defined but never used.","'Grid' is defined but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'style' is assigned a value but never used.","'validateLegalCompanyName' is assigned a value but never used.","'msg' is assigned a value but never used.","'err' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","React Hook useEffect has a missing dependency: 'seller.marketPlace'. Either include it or remove the dependency array.",["494"],{"desc":"495","fix":"496"},[271,275],"\n  .",{"messageId":"497","fix":"498","desc":"499"},{"messageId":"500","fix":"501","desc":"502"},{"desc":"503","fix":"504"},{"desc":"505","fix":"506"},{"desc":"507","fix":"508"},{"desc":"509","fix":"510"},"Update the dependencies array to be: [dispatch]",{"range":"511","text":"512"},"removeEscape",{"range":"513","text":"514"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"515","text":"516"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [dispatch, userState?.sellerId]",{"range":"517","text":"518"},"Update the dependencies array to be: [params.token, seller, sellerData.email]",{"range":"519","text":"520"},"Update the dependencies array to be: [seller, orderAcknowledged, dispatch, pageLimit]",{"range":"521","text":"522"},"Update the dependencies array to be: [seller.marketPlace]",{"range":"523","text":"524"},[1656,1658],"[dispatch]",[869,870],"",[869,869],"\\",[1060,1081],"[dispatch, userState?.sellerId]",[1497,1511],"[params.token, seller, sellerData.email]",[1115,1141],"[seller, orderAcknowledged, dispatch, pageLimit]",[942,944],"[seller.marketPlace]"]