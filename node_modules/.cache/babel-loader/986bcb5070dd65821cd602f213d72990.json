{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { bulkUploadStart, bulkUploadSuccess, bulkUploadFailure } from 'redux/reducers/bulkUpload';\nimport { bulkUploadProuducts } from \"redux/services/bulkUpload\";\nfunction* bulkUploadSagaWatcher() {\n  yield takeLatest([bulkUploadStart.type], bulkUploadWorker);\n}\nfunction* bulkUploadWorker(action) {\n  try {\n    switch (action.type) {\n      case bulkUploadStart.type:\n        {\n          const response = yield call(bulkUploadProuducts, action.payload);\n          yield put(bulkUploadSuccess({\n            bulkUploadResponse: response.ResponseBody\n          }));\n        }\n        break;\n      default:\n        break;\n    }\n  } catch (err) {\n    console.error(`Error occuring while calling an action ${action.type}`, err);\n    if (action.type === bulkUploadStart.type) {\n      var _err$response, _err$response$data;\n      console.error(err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.msg);\n      yield put(bulkUploadFailure());\n    }\n  }\n}\nexport default bulkUploadSagaWatcher;","map":{"version":3,"names":["call","put","takeLatest","bulkUploadStart","bulkUploadSuccess","bulkUploadFailure","bulkUploadProuducts","bulkUploadSagaWatcher","type","bulkUploadWorker","action","response","payload","bulkUploadResponse","ResponseBody","err","console","error","_err$response","_err$response$data","data","msg"],"sources":["/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/bulkUpload.tsx"],"sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\nimport {\n  bulkUploadStart,\n  bulkUploadSuccess,\n  bulkUploadFailure\n} from 'redux/reducers/bulkUpload';\nimport { bulkUploadProuducts } from \"redux/services/bulkUpload\";\n\nfunction* bulkUploadSagaWatcher() {\n  yield takeLatest(\n    [bulkUploadStart.type],\n    bulkUploadWorker,\n  );\n}\n\nfunction* bulkUploadWorker(action: any): any {\n  try {\n    switch (action.type) {\n      case bulkUploadStart.type: {\n        const response: any = yield call(bulkUploadProuducts, action.payload);\n        yield put(bulkUploadSuccess({bulkUploadResponse : response.ResponseBody}));\n      }\n        break;\n\n      default:\n        break;\n    }\n  } catch (err: any) {\n    console.error(`Error occuring while calling an action ${action.type}`, err);\n\n    if (action.type === bulkUploadStart.type) {\n      console.error(err?.response?.data?.msg);\n      yield put(bulkUploadFailure());\n    }\n  }\n}\n\nexport default bulkUploadSagaWatcher;\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AAC1D,SACEC,eAAe,EACfC,iBAAiB,EACjBC,iBAAiB,QACZ,2BAA2B;AAClC,SAASC,mBAAmB,QAAQ,2BAA2B;AAE/D,UAAUC,qBAAqBA,CAAA,EAAG;EAChC,MAAML,UAAU,CACd,CAACC,eAAe,CAACK,IAAI,CAAC,EACtBC,gBACF,CAAC;AACH;AAEA,UAAUA,gBAAgBA,CAACC,MAAW,EAAO;EAC3C,IAAI;IACF,QAAQA,MAAM,CAACF,IAAI;MACjB,KAAKL,eAAe,CAACK,IAAI;QAAE;UACzB,MAAMG,QAAa,GAAG,MAAMX,IAAI,CAACM,mBAAmB,EAAEI,MAAM,CAACE,OAAO,CAAC;UACrE,MAAMX,GAAG,CAACG,iBAAiB,CAAC;YAACS,kBAAkB,EAAGF,QAAQ,CAACG;UAAY,CAAC,CAAC,CAAC;QAC5E;QACE;MAEF;QACE;IACJ;EACF,CAAC,CAAC,OAAOC,GAAQ,EAAE;IACjBC,OAAO,CAACC,KAAK,CAAE,0CAAyCP,MAAM,CAACF,IAAK,EAAC,EAAEO,GAAG,CAAC;IAE3E,IAAIL,MAAM,CAACF,IAAI,KAAKL,eAAe,CAACK,IAAI,EAAE;MAAA,IAAAU,aAAA,EAAAC,kBAAA;MACxCH,OAAO,CAACC,KAAK,CAACF,GAAG,aAAHA,GAAG,wBAAAG,aAAA,GAAHH,GAAG,CAAEJ,QAAQ,cAAAO,aAAA,wBAAAC,kBAAA,GAAbD,aAAA,CAAeE,IAAI,cAAAD,kBAAA,uBAAnBA,kBAAA,CAAqBE,GAAG,CAAC;MACvC,MAAMpB,GAAG,CAACI,iBAAiB,CAAC,CAAC,CAAC;IAChC;EACF;AACF;AAEA,eAAeE,qBAAqB"},"metadata":{},"sourceType":"module"}