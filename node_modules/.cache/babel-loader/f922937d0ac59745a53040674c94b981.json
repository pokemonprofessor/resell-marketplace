{"ast":null,"code":"//Function to validate email\nconst isEmail = function (emailStr) {\n  const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return regex.test(String(emailStr).toLowerCase());\n};\n\n//Function to validate phone number\nconst isPhoneNumber = function (phoneNumberStr) {\n  const regex = /^\\d{10}$/;\n  return regex.test(String(phoneNumberStr));\n};\n\n//Function to validate that a string contains alphabetical characters. Eg - Firstname or Lastname\nconst containsAlphabeticalLetters = function (str) {\n  const regex = /^[A-Za-z\\s]+$/;\n  return regex.test(String(str));\n};\nconst isCompanyName = function (str) {\n  const regex = /^[a-zA-Z0-9][a-zA-Z0-9\\.\\-#&\\s]*$/;\n  return regex.test(String(str));\n};\n\n//Function to check starting value is backspace value or not\nconst isValueContainSpace = function (str) {\n  const regex = /^(?!\\s)/;\n  return regex.test(String(str));\n};\n\n//Function to validate that OTP length is 6.\nconst isOTP = function (Otpstr) {\n  const regex = /(^|\\D)\\d{6}($|\\D)/;\n  return regex.test(String(Otpstr));\n};\nexport { isEmail, isPhoneNumber, containsAlphabeticalLetters, isOTP, isCompanyName, isValueContainSpace };","map":{"version":3,"names":["isEmail","emailStr","regex","test","String","toLowerCase","isPhoneNumber","phoneNumberStr","containsAlphabeticalLetters","str","isCompanyName","isValueContainSpace","isOTP","Otpstr"],"sources":["/Users/pulkit/Desktop/resell-marketplace-main/src/utils/validations.tsx"],"sourcesContent":["//Function to validate email\nconst isEmail = function (emailStr : string) : boolean {\n  const regex : RegExp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return regex.test (String(emailStr).toLowerCase());\n}\n\n//Function to validate phone number\nconst isPhoneNumber = function (phoneNumberStr : string) : boolean {\n  const regex : RegExp = /^\\d{10}$/;\n  return regex.test (String(phoneNumberStr));\n}\n\n//Function to validate that a string contains alphabetical characters. Eg - Firstname or Lastname\nconst containsAlphabeticalLetters  = function (str : string) : boolean {\n  const regex : RegExp = /^[A-Za-z\\s]+$/;\n  return regex.test (String(str));\n}\n\nconst isCompanyName  = function (str : string) : boolean {\n  const regex : RegExp = /^[a-zA-Z0-9][a-zA-Z0-9\\.\\-#&\\s]*$/;\n  return regex.test (String(str));\n}\n\n//Function to check starting value is backspace value or not\nconst isValueContainSpace  = function (str : string) : boolean {\n  const regex : RegExp = /^(?!\\s)/;\n  return regex.test (String(str));\n}\n\n//Function to validate that OTP length is 6.\nconst isOTP  = function (Otpstr : string) : boolean {\n  const regex : RegExp = /(^|\\D)\\d{6}($|\\D)/;\n  return regex.test (String(Otpstr));\n}\n\nexport {\n  isEmail,\n  isPhoneNumber,\n  containsAlphabeticalLetters,\n  isOTP,\n  isCompanyName,\n  isValueContainSpace\n}\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,SAAAA,CAAUC,QAAiB,EAAY;EACrD,MAAMC,KAAc,GAAG,sJAAsJ;EAC7K,OAAOA,KAAK,CAACC,IAAI,CAAEC,MAAM,CAACH,QAAQ,CAAC,CAACI,WAAW,CAAC,CAAC,CAAC;AACpD,CAAC;;AAED;AACA,MAAMC,aAAa,GAAG,SAAAA,CAAUC,cAAuB,EAAY;EACjE,MAAML,KAAc,GAAG,UAAU;EACjC,OAAOA,KAAK,CAACC,IAAI,CAAEC,MAAM,CAACG,cAAc,CAAC,CAAC;AAC5C,CAAC;;AAED;AACA,MAAMC,2BAA2B,GAAI,SAAAA,CAAUC,GAAY,EAAY;EACrE,MAAMP,KAAc,GAAG,eAAe;EACtC,OAAOA,KAAK,CAACC,IAAI,CAAEC,MAAM,CAACK,GAAG,CAAC,CAAC;AACjC,CAAC;AAED,MAAMC,aAAa,GAAI,SAAAA,CAAUD,GAAY,EAAY;EACvD,MAAMP,KAAc,GAAG,mCAAmC;EAC1D,OAAOA,KAAK,CAACC,IAAI,CAAEC,MAAM,CAACK,GAAG,CAAC,CAAC;AACjC,CAAC;;AAED;AACA,MAAME,mBAAmB,GAAI,SAAAA,CAAUF,GAAY,EAAY;EAC7D,MAAMP,KAAc,GAAG,SAAS;EAChC,OAAOA,KAAK,CAACC,IAAI,CAAEC,MAAM,CAACK,GAAG,CAAC,CAAC;AACjC,CAAC;;AAED;AACA,MAAMG,KAAK,GAAI,SAAAA,CAAUC,MAAe,EAAY;EAClD,MAAMX,KAAc,GAAG,mBAAmB;EAC1C,OAAOA,KAAK,CAACC,IAAI,CAAEC,MAAM,CAACS,MAAM,CAAC,CAAC;AACpC,CAAC;AAED,SACEb,OAAO,EACPM,aAAa,EACbE,2BAA2B,EAC3BI,KAAK,EACLF,aAAa,EACbC,mBAAmB"},"metadata":{},"sourceType":"module"}