{"ast":null,"code":"import snack from \"components/wrapper/snack\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { acknowledgeFailure, acknowledgeStart, acknowledgeSuccess } from \"redux/reducers/orderAcknowledged\";\nimport { orderAcknowledged } from \"redux/services/orderDetails\";\nfunction* acknowledgedSagaWatcher() {\n  yield takeLatest([acknowledgeStart.type], orderAcknowledgedWorker);\n}\nfunction* orderAcknowledgedWorker(action) {\n  try {\n    switch (action.type) {\n      case acknowledgeStart.type:\n        {\n          const response = yield call(orderAcknowledged, action.payload);\n          yield put(acknowledgeSuccess({\n            response\n          }));\n          snack.success(\"Acknowledged!!\");\n        }\n        break;\n      default:\n        break;\n    }\n  } catch (err) {\n    console.error(`Error occuring while calling an action ${action.type}`, err);\n    if (action.type === acknowledgeStart.type) {\n      var _err$response, _err$response$data;\n      console.error(err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.msg);\n      yield put(acknowledgeFailure());\n    }\n  }\n}\nexport default acknowledgedSagaWatcher;","map":{"version":3,"names":["snack","call","put","takeLatest","acknowledgeFailure","acknowledgeStart","acknowledgeSuccess","orderAcknowledged","acknowledgedSagaWatcher","type","orderAcknowledgedWorker","action","response","payload","success","err","console","error","_err$response","_err$response$data","data","msg"],"sources":["/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/orderAcknowledged.tsx"],"sourcesContent":["import snack from \"components/wrapper/snack\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport {\n  acknowledgeFailure,\n  acknowledgeStart,\n  acknowledgeSuccess,\n} from \"redux/reducers/orderAcknowledged\";\nimport { orderAcknowledged } from \"redux/services/orderDetails\";\n\nfunction* acknowledgedSagaWatcher() {\n  yield takeLatest([acknowledgeStart.type], orderAcknowledgedWorker);\n}\n\nfunction* orderAcknowledgedWorker(action: any): any {\n  try {\n    switch (action.type) {\n      case acknowledgeStart.type:\n        {\n          const response: any = yield call(orderAcknowledged, action.payload);\n          yield put(acknowledgeSuccess({ response }));\n          snack.success(\"Acknowledged!!\");\n        }\n        break;\n\n      default:\n        break;\n    }\n  } catch (err: any) {\n    console.error(`Error occuring while calling an action ${action.type}`, err);\n\n    if (action.type === acknowledgeStart.type) {\n      console.error(err?.response?.data?.msg);\n      yield put(acknowledgeFailure());\n    }\n  }\n}\nexport default acknowledgedSagaWatcher;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,0BAA0B;AAC5C,SAASC,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AAC1D,SACEC,kBAAkB,EAClBC,gBAAgB,EAChBC,kBAAkB,QACb,kCAAkC;AACzC,SAASC,iBAAiB,QAAQ,6BAA6B;AAE/D,UAAUC,uBAAuBA,CAAA,EAAG;EAClC,MAAML,UAAU,CAAC,CAACE,gBAAgB,CAACI,IAAI,CAAC,EAAEC,uBAAuB,CAAC;AACpE;AAEA,UAAUA,uBAAuBA,CAACC,MAAW,EAAO;EAClD,IAAI;IACF,QAAQA,MAAM,CAACF,IAAI;MACjB,KAAKJ,gBAAgB,CAACI,IAAI;QACxB;UACE,MAAMG,QAAa,GAAG,MAAMX,IAAI,CAACM,iBAAiB,EAAEI,MAAM,CAACE,OAAO,CAAC;UACnE,MAAMX,GAAG,CAACI,kBAAkB,CAAC;YAAEM;UAAS,CAAC,CAAC,CAAC;UAC3CZ,KAAK,CAACc,OAAO,CAAC,gBAAgB,CAAC;QACjC;QACA;MAEF;QACE;IACJ;EACF,CAAC,CAAC,OAAOC,GAAQ,EAAE;IACjBC,OAAO,CAACC,KAAK,CAAE,0CAAyCN,MAAM,CAACF,IAAK,EAAC,EAAEM,GAAG,CAAC;IAE3E,IAAIJ,MAAM,CAACF,IAAI,KAAKJ,gBAAgB,CAACI,IAAI,EAAE;MAAA,IAAAS,aAAA,EAAAC,kBAAA;MACzCH,OAAO,CAACC,KAAK,CAACF,GAAG,aAAHA,GAAG,wBAAAG,aAAA,GAAHH,GAAG,CAAEH,QAAQ,cAAAM,aAAA,wBAAAC,kBAAA,GAAbD,aAAA,CAAeE,IAAI,cAAAD,kBAAA,uBAAnBA,kBAAA,CAAqBE,GAAG,CAAC;MACvC,MAAMnB,GAAG,CAACE,kBAAkB,CAAC,CAAC,CAAC;IACjC;EACF;AACF;AACA,eAAeI,uBAAuB"},"metadata":{},"sourceType":"module"}