{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { ordersFailure, ordersStart, ordersSuccess } from \"redux/reducers/orderDetails\";\nimport { getorders } from \"redux/services/orderDetails\";\nfunction* ordersSagaWatcher() {\n  yield takeLatest([ordersStart.type], ordersDetailWorker);\n}\nfunction* ordersDetailWorker(action) {\n  try {\n    switch (action.type) {\n      case ordersStart.type:\n        {\n          const response = yield call(getorders, action.payload);\n          yield put(ordersSuccess({\n            orders: response.ResponseBody.orders,\n            orderCount: response.ResponseBody.orderCount\n          }));\n        }\n        break;\n      default:\n        break;\n    }\n  } catch (err) {\n    console.error(`Error occuring while calling an action ${action.type}`, err);\n    if (action.type === ordersStart.type) {\n      var _err$response, _err$response$data;\n      console.error(err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.msg);\n      yield put(ordersFailure());\n    }\n  }\n}\nexport default ordersSagaWatcher;","map":{"version":3,"names":["call","put","takeLatest","ordersFailure","ordersStart","ordersSuccess","getorders","ordersSagaWatcher","type","ordersDetailWorker","action","response","payload","orders","ResponseBody","orderCount","err","console","error","_err$response","_err$response$data","data","msg"],"sources":["/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/orderDetails.tsx"],"sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { ordersFailure, ordersStart, ordersSuccess } from \"redux/reducers/orderDetails\";\nimport { getorders } from \"redux/services/orderDetails\";\n\nfunction* ordersSagaWatcher() {\n  yield takeLatest(\n    [ordersStart.type],\n    ordersDetailWorker,\n  );\n}\n\nfunction* ordersDetailWorker(action: any): any {\n  try {\n    switch (action.type) {\n      case ordersStart.type: {\n        const response: any = yield call(getorders,action.payload);\n        yield put(ordersSuccess({orders : response.ResponseBody.orders, orderCount: response.ResponseBody.orderCount}));\n      }\n        break;\n\n      default:\n        break;\n    }\n  } catch (err: any) {\n    console.error(`Error occuring while calling an action ${action.type}`, err);\n\n    if (action.type === ordersStart.type) {\n      console.error(err?.response?.data?.msg);\n      yield put(ordersFailure());\n    }\n  }\n}\n\nexport default ordersSagaWatcher;\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AAC1D,SAASC,aAAa,EAAEC,WAAW,EAAEC,aAAa,QAAQ,6BAA6B;AACvF,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,UAAUC,iBAAiBA,CAAA,EAAG;EAC5B,MAAML,UAAU,CACd,CAACE,WAAW,CAACI,IAAI,CAAC,EAClBC,kBACF,CAAC;AACH;AAEA,UAAUA,kBAAkBA,CAACC,MAAW,EAAO;EAC7C,IAAI;IACF,QAAQA,MAAM,CAACF,IAAI;MACjB,KAAKJ,WAAW,CAACI,IAAI;QAAE;UACrB,MAAMG,QAAa,GAAG,MAAMX,IAAI,CAACM,SAAS,EAACI,MAAM,CAACE,OAAO,CAAC;UAC1D,MAAMX,GAAG,CAACI,aAAa,CAAC;YAACQ,MAAM,EAAGF,QAAQ,CAACG,YAAY,CAACD,MAAM;YAAEE,UAAU,EAAEJ,QAAQ,CAACG,YAAY,CAACC;UAAU,CAAC,CAAC,CAAC;QACjH;QACE;MAEF;QACE;IACJ;EACF,CAAC,CAAC,OAAOC,GAAQ,EAAE;IACjBC,OAAO,CAACC,KAAK,CAAE,0CAAyCR,MAAM,CAACF,IAAK,EAAC,EAAEQ,GAAG,CAAC;IAE3E,IAAIN,MAAM,CAACF,IAAI,KAAKJ,WAAW,CAACI,IAAI,EAAE;MAAA,IAAAW,aAAA,EAAAC,kBAAA;MACpCH,OAAO,CAACC,KAAK,CAACF,GAAG,aAAHA,GAAG,wBAAAG,aAAA,GAAHH,GAAG,CAAEL,QAAQ,cAAAQ,aAAA,wBAAAC,kBAAA,GAAbD,aAAA,CAAeE,IAAI,cAAAD,kBAAA,uBAAnBA,kBAAA,CAAqBE,GAAG,CAAC;MACvC,MAAMrB,GAAG,CAACE,aAAa,CAAC,CAAC,CAAC;IAC5B;EACF;AACF;AAEA,eAAeI,iBAAiB"},"metadata":{},"sourceType":"module"}