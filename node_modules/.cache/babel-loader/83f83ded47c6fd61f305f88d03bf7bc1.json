{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { updateProductQtyFailure, updateProductQtyStart, updateProductQtySuccess } from \"redux/reducers/updateProductQty\";\nimport { updateProductQty } from \"redux/services/updateProductQty\";\nfunction* updateProductQtySagaWatcher() {\n  yield takeLatest([updateProductQtyStart.type], updateProductQtyWorker);\n}\nfunction* updateProductQtyWorker(action) {\n  try {\n    switch (action.type) {\n      case updateProductQtyStart.type:\n        {\n          const response = yield call(updateProductQty, action.payload);\n          yield put(updateProductQtySuccess({\n            bulkUploadResponse: response.ResponseBody\n          }));\n        }\n        break;\n      default:\n        break;\n    }\n  } catch (err) {\n    console.error(`Error occuring while calling an action ${action.type}`, err);\n    if (action.type === updateProductQtyStart.type) {\n      var _err$response, _err$response$data;\n      console.error(err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.msg);\n      yield put(updateProductQtyFailure());\n    }\n  }\n}\nexport default updateProductQtySagaWatcher;","map":{"version":3,"names":["call","put","takeLatest","updateProductQtyFailure","updateProductQtyStart","updateProductQtySuccess","updateProductQty","updateProductQtySagaWatcher","type","updateProductQtyWorker","action","response","payload","bulkUploadResponse","ResponseBody","err","console","error","_err$response","_err$response$data","data","msg"],"sources":["/Users/pulkit/Desktop/resell-marketplace-main/src/redux/saga/updateProductQty.tsx"],"sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { updateProductQtyFailure, updateProductQtyStart, updateProductQtySuccess } from \"redux/reducers/updateProductQty\";\nimport { updateProductQty } from \"redux/services/updateProductQty\";\n\nfunction* updateProductQtySagaWatcher() {\n  yield takeLatest(\n    [updateProductQtyStart.type],\n    updateProductQtyWorker,\n  );\n}\n\nfunction* updateProductQtyWorker(action: any): any {\n  try {\n    switch (action.type) {\n      case updateProductQtyStart.type: {\n        const response: any = yield call(updateProductQty, action.payload);\n        yield put(updateProductQtySuccess({bulkUploadResponse : response.ResponseBody}));\n      }\n        break;\n\n      default:\n        break;\n    }\n  } catch (err: any) {\n    console.error(`Error occuring while calling an action ${action.type}`, err);\n\n    if (action.type === updateProductQtyStart.type) {\n      console.error(err?.response?.data?.msg);\n      yield put(updateProductQtyFailure());\n    }\n  }\n}\n\nexport default updateProductQtySagaWatcher;\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AAC1D,SAASC,uBAAuB,EAAEC,qBAAqB,EAAEC,uBAAuB,QAAQ,iCAAiC;AACzH,SAASC,gBAAgB,QAAQ,iCAAiC;AAElE,UAAUC,2BAA2BA,CAAA,EAAG;EACtC,MAAML,UAAU,CACd,CAACE,qBAAqB,CAACI,IAAI,CAAC,EAC5BC,sBACF,CAAC;AACH;AAEA,UAAUA,sBAAsBA,CAACC,MAAW,EAAO;EACjD,IAAI;IACF,QAAQA,MAAM,CAACF,IAAI;MACjB,KAAKJ,qBAAqB,CAACI,IAAI;QAAE;UAC/B,MAAMG,QAAa,GAAG,MAAMX,IAAI,CAACM,gBAAgB,EAAEI,MAAM,CAACE,OAAO,CAAC;UAClE,MAAMX,GAAG,CAACI,uBAAuB,CAAC;YAACQ,kBAAkB,EAAGF,QAAQ,CAACG;UAAY,CAAC,CAAC,CAAC;QAClF;QACE;MAEF;QACE;IACJ;EACF,CAAC,CAAC,OAAOC,GAAQ,EAAE;IACjBC,OAAO,CAACC,KAAK,CAAE,0CAAyCP,MAAM,CAACF,IAAK,EAAC,EAAEO,GAAG,CAAC;IAE3E,IAAIL,MAAM,CAACF,IAAI,KAAKJ,qBAAqB,CAACI,IAAI,EAAE;MAAA,IAAAU,aAAA,EAAAC,kBAAA;MAC9CH,OAAO,CAACC,KAAK,CAACF,GAAG,aAAHA,GAAG,wBAAAG,aAAA,GAAHH,GAAG,CAAEJ,QAAQ,cAAAO,aAAA,wBAAAC,kBAAA,GAAbD,aAAA,CAAeE,IAAI,cAAAD,kBAAA,uBAAnBA,kBAAA,CAAqBE,GAAG,CAAC;MACvC,MAAMpB,GAAG,CAACE,uBAAuB,CAAC,CAAC,CAAC;IACtC;EACF;AACF;AAEA,eAAeI,2BAA2B"},"metadata":{},"sourceType":"module"}